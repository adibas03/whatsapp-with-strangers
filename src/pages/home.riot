<home>
  <h2>Hello <b>Stranger,</b></h2>
  <p>
    Chat with anyone on Whatsapp without saving the number to your contacts! <br/>
    <span>
      Ever had to chat with a number on whatsapp just once; perhaps to send some 
      information across or to complete some process? <br/>
      Now you can, without saving the number as a contact.
      </span>
  </p>
  <div>
    <form if={Object.keys(state.codes).length > 0}  onsubmit={ chatNow }>
      <p>
        <select if={Object.keys(state.codes).length > 0} name="countryCode" value={state.activeCountry} onchange={countryChange}>
          <option each={cc in Object.entries(state.codes)} value={cc[1]} >
            <span class="name">
              {cc[0]}
            </span>
            <span>
            {" "}(+{cc[1]})
            </span>
          </option>
        </select>
        <input value={state.activeNumber} onkeypress={numberOnly} onchange={phoneNumbeChange} type="tel" pattern="[0-9]+" minlength="10" maxlength="11" placeholder="xxxxxxxxxx" required/>
        <p class="app">
          <input id="appPresent" value={state.appPresent} onchange={appPresentChange} type="checkbox" />
          <label for="appPresent"> 
            Do you have Whatsapp installed?
          </label>
        </p>
      </p>
      <p class="button">
        <button> Chat Now </button>
      </p>
    </form>
  </div>
  <div class="history">
    <h3>Previous Chats ({state.history.length})</h3>
    <p each={h in state.history}>
      <a href="{Object.values(h)[0]}" title="{Object.keys(h)[0]}" target="_blank">
        {Object.keys(h)[0]}
      </a>
    </p>

    <p if={state.history.length === 0}>
      No history yet.
    </p>

  </div>

  <script>
    import countryCodes from "country-codes-list";

    export default {
      state: {
        codes: countryCodes.customList("countryNameEn", "{countryCallingCode}"),
        activeCountry: "",
        activeNumber: "",
        appPresent: false,
        history: [],
      },
      onMounted() {
        //this.state.codes.each(console.log)
        this.update({
          activeCountry: Object.values(this.state.codes)[0],
        });
      },
      numberOnly(e) {
        return new RegExp(/[0-9]/).test(e.key);
      },
      phoneNumbeChange(p) {
        this.update({
          activeNumber: p.target.value,
        });
      },
      countryChange(e) {
        this.update({
          activeCountry: e.target.value,
        });
      },
      appPresentChange(e) {
        this.update({
          appPresent: !this.state.appPresent,
        });
      },
      chatNow(e) {
        e.preventDefault();

        const api =
          "https://api.whatsapp.com/send/?phone=[n]&text&type=phone_number&app_absent=[a]";
        const n = `${this.state.activeCountry}${this.state.activeNumber.replace(
          this.state.activeNumber.length > 10 ? new RegExp(/^0/) : "",
          ""
        )}`;
        const a = this.state.appPresent ? 0 : 1;
        const apid = api.replace("[n]", n).replace("[a]", a);

        if (this.state.history.length > 0) {
          const findIndex = this.state.history.findIndex((hist) =>
            Object.keys(hist).includes(n)
          );

          if (findIndex > -1) {
            if (Object.values(this.state.history[findIndex]).includes(apid)) {
              // skip
            } else {
              const history = this.state.history;
              history.splice(findIndex, 1, {
                [n]: apid,
              });

              this.update({
                history,
              });
            }
          } else {
            this.update({
              history: this.state.history.concat([
                {
                  [n]: apid,
                },
              ]),
            });
          }
        } else {
          this.update({
            history: this.state.history.concat([
              {
                [n]: apid,
              },
            ]),
          });
        }

        window.open(apid, "_blank");
      },
    };
  </script>

  <style>
    p span {
      font-size: 0.6em;
      max-width: 75%;
      margin: 0.6em auto 2em;
      display: block;
    }

    div p.app {
      font-size: 0.8em;
    }

    div.history {
      margin-top: 2em;
    }

    select {
      display: inline;
      width: 8.8em;
      margin-right: 0.5em;
      padding: 0.14em 0.1em;
      font-size: 0.7em;
    }

    select option {
    }

    select option span.name {
      text-overflow: ellipsis;
    }

    input {
      margin-top: 0.5em;
      line-height: 1.17em;
      width: 10em;
      font-size: 0.8em;
    }

    div p.app input {
      margin: 0.1em 0.2em 0;
      width: auto;
    }

    p.button {
      margin-top: 1em;
    }

    button {
      font-size: 0.7em;
    }

    div.history h3 {
      margin-bottom: 1.2em;
    }

    div.history p {
      font-size: 0.8em;
    }

  </style>
</home>