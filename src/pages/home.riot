<home>
  <h2>Hello <b>Stranger,</b></h2>
  <p>
    Chat with anyone on Whatsapp without saving the number to your contacts! <br/>
    <span>
      Ever had to chat with a number on whatsapp just once; perhaps to send some 
      information across or to complete some process? <br/>
      Now you can, without saving the number as a contact.
      </span>
  </p>
  <div>
    <form onsubmit={ chatNow } if={Object.keys(state.codes).length > 0} >
      <p>
        Enter unsaved number
      </p>
      <p>
        <select if={Object.keys(state.codes).length > 0} name="countryCode" value={state.activeCountry} onchange={countryChange}>
          <option each={cc in Object.entries(state.codes).sort((a,b) => a[0] > b[0] ? 1 : -1)} value={cc[1]} {... state.activeCountry === cc[1] ? {selected: "selected"} : {}}
          >
            <span class="name">
              {cc[0]}
            </span>
            <span>
            {" "}(+{cc[1]})
            </span>
          </option>
        </select>
        <input id="phoneNumber" value={state.activeNumber} onkeypress={numberOnly} onkeyup={phoneNumberChange} onchange={phoneNumberChange} onpaste={phoneNumberChange} type="tel" pattern="[0-9]\{10,11}" minlength="10" placeholder="123 456 7890" title="123 456 7890" required/>
        <p class="app">
          <input id="appPresent" value={state.appPresent} onchange={appPresentChange} type="checkbox" />
          <label for="appPresent"> 
            Do you have Whatsapp installed?
          </label>
        </p>
      </p>
      <p class="button">
        <button type="submit" > Chat Now </button>
      </p>
    </form>
  </div>
  <div class="history">
    <h3>Previous Chats ({state.history.length})
        <span if={state.history?.length > 0} >
          <br/>
          [
            <span onclick={resetStorage}>
              clear
            </span>
           ]
        </span>
    </h3>
    <p each={h in state.history}>
      <a href="{extractHistoryUrl(Object.values(h)[0])}" title="{extractHistoryKey(h)}" target="_blank">
        {extractHistoryKey(h)}
      </a>
      <span>
        <span onclick={() => removeHistory(extractHistoryKey(h))}> x </span>
      </span>
    </p>

    <p if={state.history.length === 0}>
      No history yet.
    </p>
  </div>

  <script>
    import countryCodes from "country-codes-list";
    import timezones from "../data/timezones.json" with { type: "json" };
    import storage from "../service/storage";
    import hService from "../service/history";

    export default {
      state: {
        codes: countryCodes.customList("countryNameEn", "{countryCallingCode}"),
        countryCodes: countryCodes.customList("countryCode", "{countryNameEn}"),
        activeCountry: "",
        activeNumber: "",
        appPresent: false,
        history: storage.getStoredHistory() || [],
      },
      onMounted() {

        const tz = Intl.DateTimeFormat().resolvedOptions()
        const country = timezones[tz.timeZone]
        let activeCountry


        if(country){
          activeCountry = this.state.codes[this.state.countryCodes[country.country]]
        } else {
          activeCountry = Object.values(this.state.codes)[0]
        }

        this.update({
          activeCountry
        });

      },
      numberOnly(e) {
        return new RegExp(/[0-9]/).test(e.key);
      },
      cleanNumber(e) {
        return e.replace(new RegExp(/[^0-9]+/, 'gmi'), '');
      },
      phoneNumberChange(p) {
        const activeNumber = this.cleanNumber(p.target.value)       

        this.update({
          activeNumber
        });

        this.phoneNumberValid(true)
      },
      phoneNumberValid(reset) {
        const field = document.getElementById("phoneNumber")

        if(reset){
          field.setCustomValidity("")
          return true
        }

        const activeNumber = this.state.activeNumber
        const isValid = new RegExp(/^[0-9]{10,11}$/).test(activeNumber) && (
          activeNumber.length === 10 || (activeNumber.length === 11 && new RegExp(/^0[0-9]{10}$/).test(activeNumber))
        ) 

        if(!isValid){
          field.setCustomValidity("Please match the format requested: 123 456 7890")
          field.reportValidity()
          return false        
        }

        return true
      },
      countryChange(e) {
        this.update({
          activeCountry: e.target.value,
        });
      },
      appPresentChange(e) {
        this.update({
          appPresent: !this.state.appPresent,
        });
      },
      extractHistoryUrl (history) {
        return hService.getUrlFromHistory(history)
      },
      extractHistoryKey (history) {
        return hService.getKeyFromHistoryRef(history)
      },
      removeHistory (key) {
        const newHistory = hService.removeFromHistoryList(key ,this.state.history)
        this.updateHistory(newHistory);
      },
      resetStorage(){
        storage.clearStoredHistory()
        this.updateHistory([])
      },
      updateHistory (history) {
        this.update({
          history
        });
        storage.storeHistory(history)
      },
      chatNow(e) {
        e.preventDefault();

        if(!this.phoneNumberValid()){
          return false
        }

        const activeNumber = this.state.activeNumber
        const api =
          "https://api.whatsapp.com/send/?phone=[n]&text&type=phone_number&app_absent=[a]";
        const n = `${this.state.activeCountry}${activeNumber.replace(
          activeNumber.length > 10 ? new RegExp(/^0/) : "",
          ""
        )}`;
        const a = this.state.appPresent ? 0 : 1;
        const apid = api.replace("[n]", n).replace("[a]", a);
        const timestamp = new Date().getTime()

        const newHistory = hService.addToHistoryList(n, {apid, timestamp}, this.state.history)
        this.updateHistory(newHistory);

        window.open(apid, "_blank");
      },
    };
  </script>

  <style>
    p span {
      font-size: 0.6em;
      max-width: 75%;
      margin: 0.6em auto 2em;
      display: block;
    }

    div p.app {
      font-size: 0.8em;
    }

    div.history {
      margin-top: 2em;
    }

    form p:first-of-type {
      font-size: 0.8em;
      margin-bottom: 0;
      font-weight: bold;
      color: gray;
    }

    select {
      display: inline;
      width: 8.8em;
      margin-right: 0.5em;
      padding: 0.14em 0.1em;
      font-size: 0.7em;
    }

    select option {
    }

    select option span.name {
      text-overflow: ellipsis;
    }

    input {
      margin-top: 0.5em;
      line-height: 1.17em;
      width: 10em;
      font-size: 0.8em;
    }

    div p.app input {
      margin: 0.1em 0.2em 0;
      width: auto;
    }

    p.button {
      margin-top: 1em;
    }

    button {
      font-size: 0.7em;
    }

    div.history h3 {
      margin-bottom: 1.2em;
    }

    div.history h3 span{
      font-size: 0.7em;
    }

    div.history h3 span span{
      color: var(--primary-color);
      cursor: pointer;
      font-weight: 500;
      font-size: 0.9em;
    }

    div.history p {
      font-size: 0.8em;
    }

    div.history p span {
      vertical-align: top;
      display: inline;
      font-size: 1em;
    }

    div.history p span span {
      font-weight: 600;
      color: firebrick;
      margin-left: 4px;
      font-size: 0.8em;
      cursor: pointer;
    }

  </style>
</home>