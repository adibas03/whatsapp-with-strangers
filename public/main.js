import { readFileSync } from 'https://deno.land/x/deno@v1.0.0/std/node/fs.ts';

/* Riot WIP, @license MIT */
// Riot.js constants that can be used across more modules

const COMPONENTS_IMPLEMENTATION_MAP = new Map(),
  DOM_COMPONENT_INSTANCE_PROPERTY = Symbol('riot-component'),
  PLUGINS_SET = new Set(),
  IS_DIRECTIVE = 'is',
  MOUNT_METHOD_KEY = 'mount',
  UPDATE_METHOD_KEY = 'update',
  UNMOUNT_METHOD_KEY = 'unmount',
  SHOULD_UPDATE_KEY = 'shouldUpdate',
  ON_BEFORE_MOUNT_KEY = 'onBeforeMount',
  ON_MOUNTED_KEY = 'onMounted',
  ON_BEFORE_UPDATE_KEY = 'onBeforeUpdate',
  ON_UPDATED_KEY = 'onUpdated',
  ON_BEFORE_UNMOUNT_KEY = 'onBeforeUnmount',
  ON_UNMOUNTED_KEY = 'onUnmounted',
  PROPS_KEY = 'props',
  STATE_KEY = 'state',
  SLOTS_KEY = 'slots',
  ROOT_KEY = 'root',
  IS_PURE_SYMBOL = Symbol('pure'),
  IS_COMPONENT_UPDATING = Symbol('is_updating'),
  PARENT_KEY_SYMBOL = Symbol('parent'),
  ATTRIBUTES_KEY_SYMBOL = Symbol('attributes'),
  TEMPLATE_KEY_SYMBOL = Symbol('template');

/* Riot WIP, @license MIT */
const ATTRIBUTE = 0;
const EVENT = 1;
const TEXT = 2;
const VALUE = 3;

const expressionTypes = {
  ATTRIBUTE,
  EVENT,
  TEXT,
  VALUE,
};

/* Riot WIP, @license MIT */
/**
 * Convert a string from camel case to dash-case
 * @param   {string} string - probably a component tag name
 * @returns {string} component name normalized
 */
function camelToDashCase(string) {
  return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()
}

/**
 * Convert a string containing dashes to camel case
 * @param   {string} string - input string
 * @returns {string} my-string -> myString
 */
function dashToCamelCase$1(string) {
  return string.replace(/-(\w)/g, (_, c) => c.toUpperCase())
}

/* Riot WIP, @license MIT */

/**
 * Throw an error with a descriptive message
 * @param   { string } message - error message
 * @param   { string } cause - optional error cause object
 * @returns { undefined } hoppla... at this point the program should stop working
 */
function panic$4(message, cause) {
  throw new Error(message, { cause })
}
/**
 * Returns the memoized (cached) function.
 * // borrowed from https://www.30secondsofcode.org/js/s/memoize
 * @param {Function} fn - function to memoize
 * @returns {Function} memoize function
 */
function memoize(fn) {
  const cache = new Map();
  const cached = (val) => {
    return cache.has(val)
      ? cache.get(val)
      : cache.set(val, fn.call(this, val)) && cache.get(val)
  };
  cached.cache = cache;
  return cached
}

/**
 * Evaluate a list of attribute expressions
 * @param   {Array} attributes - attribute expressions generated by the riot compiler
 * @returns {Object} key value pairs with the result of the computation
 */
function evaluateAttributeExpressions(attributes) {
  return attributes.reduce((acc, attribute) => {
    const { value, type } = attribute;

    switch (true) {
      // spread attribute
      case !attribute.name && type === ATTRIBUTE:
        return {
          ...acc,
          ...value,
        }
      // value attribute
      case type === VALUE:
        acc.value = attribute.value;
        break
      // normal attributes
      default:
        acc[dashToCamelCase$1(attribute.name)] = attribute.value;
    }

    return acc
  }, {})
}

/* Riot WIP, @license MIT */
/**
 * Quick type checking
 * @param   {*} element - anything
 * @param   {string} type - type definition
 * @returns {boolean} true if the type corresponds
 */
function checkType(element, type) {
  return typeof element === type
}

/**
 * Check if an element is part of an svg
 * @param   {HTMLElement}  el - element to check
 * @returns {boolean} true if we are in an svg context
 */
function isSvg(el) {
  const owner = el.ownerSVGElement;

  return !!owner || owner === null
}

/**
 * Check if an element is a template tag
 * @param   {HTMLElement}  el - element to check
 * @returns {boolean} true if it's a <template>
 */
function isTemplate(el) {
  return el.tagName.toLowerCase() === 'template'
}

/**
 * Check that will be passed if its argument is a function
 * @param   {*} value - value to check
 * @returns {boolean} - true if the value is a function
 */
function isFunction(value) {
  return checkType(value, 'function')
}

/**
 * Check if a value is a Boolean
 * @param   {*}  value - anything
 * @returns {boolean} true only for the value is a boolean
 */
function isBoolean(value) {
  return checkType(value, 'boolean')
}

/**
 * Check if a value is an Object
 * @param   {*}  value - anything
 * @returns {boolean} true only for the value is an object
 */
function isObject(value) {
  return !isNil(value) && value.constructor === Object
}

/**
 * Check if a value is null or undefined
 * @param   {*}  value - anything
 * @returns {boolean} true only for the 'undefined' and 'null' types
 */
function isNil(value) {
  return value === null || value === undefined
}

/* Riot WIP, @license MIT */

// does simply nothing
function noop() {
  return this
}

/**
 * Autobind the methods of a source object to itself
 * @param   {Object} source - probably a riot tag instance
 * @param   {Array<string>} methods - list of the methods to autobind
 * @returns {Object} the original object received
 */
function autobindMethods(source, methods) {
  methods.forEach((method) => {
    source[method] = source[method].bind(source);
  });

  return source
}

/**
 * Call the first argument received only if it's a function otherwise return it as it is
 * @param   {*} source - anything
 * @returns {*} anything
 */
function callOrAssign(source) {
  return isFunction(source)
    ? source.prototype && source.prototype.constructor
      ? new source()
      : source()
    : source
}

/* Riot WIP, @license MIT */

/**
 * Get all the element attributes as object
 * @param   {HTMLElement} element - DOM node we want to parse
 * @returns {Object} all the attributes found as a key value pairs
 */
function DOMattributesToObject(element) {
  return Array.from(element.attributes).reduce((acc, attribute) => {
    acc[dashToCamelCase$1(attribute.name)] = attribute.value;
    return acc
  }, {})
}

/**
 * Move all the child nodes from a source tag to another
 * @param   {HTMLElement} source - source node
 * @param   {HTMLElement} target - target node
 * @returns {undefined} it's a void method ¯\_(ツ)_/¯
 */

// Ignore this helper because it's needed only for svg tags
function moveChildren(source, target) {
  // eslint-disable-next-line fp/no-loops
  while (source.firstChild) target.appendChild(source.firstChild);
}

/**
 * Remove the child nodes from any DOM node
 * @param   {HTMLElement} node - target node
 * @returns {undefined}
 */
function cleanNode(node) {
  // eslint-disable-next-line fp/no-loops
  while (node.firstChild) node.removeChild(node.firstChild);
}

/**
 * Clear multiple children in a node
 * @param   {HTMLElement[]} children - direct children nodes
 * @returns {undefined}
 */
function clearChildren(children) {
  // eslint-disable-next-line fp/no-loops,fp/no-let
  for (let i = 0; i < children.length; i++) removeChild(children[i]);
}

/**
 * Remove a node
 * @param {HTMLElement}node - node to remove
 * @returns {undefined}
 */
const removeChild = (node) => node.remove();

/**
 * Insert before a node
 * @param {HTMLElement} newNode - node to insert
 * @param {HTMLElement} refNode - ref child
 * @returns {undefined}
 */
const insertBefore = (newNode, refNode) =>
  refNode &&
  refNode.parentNode &&
  refNode.parentNode.insertBefore(newNode, refNode);

/**
 * Replace a node
 * @param {HTMLElement} newNode - new node to add to the DOM
 * @param {HTMLElement} replaced - node to replace
 * @returns {undefined}
 */
const replaceChild = (newNode, replaced) =>
  replaced &&
  replaced.parentNode &&
  replaced.parentNode.replaceChild(newNode, replaced);

/* Riot v9.1.2, @license MIT */

// Components without template use a mocked template interface with some basic functionalities to
// guarantee consistent rendering behaviour see https://github.com/riot/riot/issues/2984
const MOCKED_TEMPLATE_INTERFACE = {
  [MOUNT_METHOD_KEY](el) {
    this.el = el;
  },
  [UPDATE_METHOD_KEY]: noop,
  [UNMOUNT_METHOD_KEY](_, __, mustRemoveRoot = false) {
    if (mustRemoveRoot) removeChild(this.el);
    else if (!mustRemoveRoot) cleanNode(this.el);
  },
  clone: noop,
  createDOM: noop,
};

/* Riot WIP, @license MIT */
const EACH = 0;
const IF = 1;
const SIMPLE = 2;
const TAG = 3;
const SLOT = 4;

const bindingTypes = {
  EACH,
  IF,
  SIMPLE,
  TAG,
  SLOT,
};

/* Riot WIP, @license MIT */
/**
 * Helper function to set an immutable property
 * @param   {Object} source - object where the new property will be set
 * @param   {string} key - object key where the new property will be stored
 * @param   {*} value - value of the new property
 * @param   {Object} options - set the property overriding the default options
 * @returns {Object} - the original object modified
 */
function defineProperty(source, key, value, options = {}) {
  /* eslint-disable fp/no-mutating-methods */
  Object.defineProperty(source, key, {
    value,
    enumerable: false,
    writable: false,
    configurable: true,
    ...options,
  });
  /* eslint-enable fp/no-mutating-methods */

  return source
}

/**
 * Define multiple properties on a target object
 * @param   {Object} source - object where the new properties will be set
 * @param   {Object} properties - object containing as key pair the key + value properties
 * @param   {Object} options - set the property overriding the default options
 * @returns {Object} the original object modified
 */
function defineProperties(source, properties, options) {
  Object.entries(properties).forEach(([key, value]) => {
    defineProperty(source, key, value, options);
  });

  return source
}

/**
 * Define default properties if they don't exist on the source object
 * @param   {Object} source - object that will receive the default properties
 * @param   {Object} defaults - object containing additional optional keys
 * @returns {Object} the original object received enhanced
 */
function defineDefaults(source, defaults) {
  Object.entries(defaults).forEach(([key, value]) => {
    if (!source[key]) source[key] = value;
  });

  return source
}

/* Riot WIP, @license MIT */

const HEAD_SYMBOL = Symbol();
const TAIL_SYMBOL = Symbol();

/**
 * Create the <template> fragments text nodes
 * @return {Object} {{head: Text, tail: Text}}
 */
function createHeadTailPlaceholders() {
  const head = document.createTextNode('');
  const tail = document.createTextNode('');

  head[HEAD_SYMBOL] = true;
  tail[TAIL_SYMBOL] = true;

  return { head, tail }
}

/**
 * Create the template meta object in case of <template> fragments
 * @param   {TemplateChunk} componentTemplate - template chunk object
 * @returns {Object} the meta property that will be passed to the mount function of the TemplateChunk
 */
function createTemplateMeta(componentTemplate) {
  const fragment = componentTemplate.dom.cloneNode(true);
  const { head, tail } = createHeadTailPlaceholders();

  return {
    avoidDOMInjection: true,
    fragment,
    head,
    tail,
    children: [head, ...Array.from(fragment.childNodes), tail],
  }
}

/* c8 ignore start */
/**
 * ISC License
 *
 * Copyright (c) 2020, Andrea Giammarchi, @WebReflection
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

// fork of https://github.com/WebReflection/udomdiff version 1.1.0
// due to https://github.com/WebReflection/udomdiff/pull/2
/* eslint-disable */

/**
 * @param {Node[]} a The list of current/live children
 * @param {Node[]} b The list of future children
 * @param {(entry: Node, action: number) => Node} get
 * The callback invoked per each entry related DOM operation.
 * @param {Node} [before] The optional node used as anchor to insert before.
 * @returns {Node[]} The same list of future children.
 */
const udomdiff = (a, b, get, before) => {
  const bLength = b.length;
  let aEnd = a.length;
  let bEnd = bLength;
  let aStart = 0;
  let bStart = 0;
  let map = null;
  while (aStart < aEnd || bStart < bEnd) {
    // append head, tail, or nodes in between: fast path
    if (aEnd === aStart) {
      // we could be in a situation where the rest of nodes that
      // need to be added are not at the end, and in such case
      // the node to `insertBefore`, if the index is more than 0
      // must be retrieved, otherwise it's gonna be the first item.
      const node =
        bEnd < bLength
          ? bStart
            ? get(b[bStart - 1], -0).nextSibling
            : get(b[bEnd - bStart], 0)
          : before;
      while (bStart < bEnd) insertBefore(get(b[bStart++], 1), node);
    }
    // remove head or tail: fast path
    else if (bEnd === bStart) {
      while (aStart < aEnd) {
        // remove the node only if it's unknown or not live
        if (!map || !map.has(a[aStart])) removeChild(get(a[aStart], -1));
        aStart++;
      }
    }
    // same node: fast path
    else if (a[aStart] === b[bStart]) {
      aStart++;
      bStart++;
    }
    // same tail: fast path
    else if (a[aEnd - 1] === b[bEnd - 1]) {
      aEnd--;
      bEnd--;
    }
    // The once here single last swap "fast path" has been removed in v1.1.0
    // https://github.com/WebReflection/udomdiff/blob/single-final-swap/esm/index.js#L69-L85
    // reverse swap: also fast path
    else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {
      // this is a "shrink" operation that could happen in these cases:
      // [1, 2, 3, 4, 5]
      // [1, 4, 3, 2, 5]
      // or asymmetric too
      // [1, 2, 3, 4, 5]
      // [1, 2, 3, 5, 6, 4]
      const node = get(a[--aEnd], -1).nextSibling;
      insertBefore(get(b[bStart++], 1), get(a[aStart++], -1).nextSibling);
      insertBefore(get(b[--bEnd], 1), node);
      // mark the future index as identical (yeah, it's dirty, but cheap 👍)
      // The main reason to do this, is that when a[aEnd] will be reached,
      // the loop will likely be on the fast path, as identical to b[bEnd].
      // In the best case scenario, the next loop will skip the tail,
      // but in the worst one, this node will be considered as already
      // processed, bailing out pretty quickly from the map index check
      a[aEnd] = b[bEnd];
    }
    // map based fallback, "slow" path
    else {
      // the map requires an O(bEnd - bStart) operation once
      // to store all future nodes indexes for later purposes.
      // In the worst case scenario, this is a full O(N) cost,
      // and such scenario happens at least when all nodes are different,
      // but also if both first and last items of the lists are different
      if (!map) {
        map = new Map();
        let i = bStart;
        while (i < bEnd) map.set(b[i], i++);
      }
      // if it's a future node, hence it needs some handling
      if (map.has(a[aStart])) {
        // grab the index of such node, 'cause it might have been processed
        const index = map.get(a[aStart]);
        // if it's not already processed, look on demand for the next LCS
        if (bStart < index && index < bEnd) {
          let i = aStart;
          // counts the amount of nodes that are the same in the future
          let sequence = 1;
          while (++i < aEnd && i < bEnd && map.get(a[i]) === index + sequence)
            sequence++;
          // effort decision here: if the sequence is longer than replaces
          // needed to reach such sequence, which would brings again this loop
          // to the fast path, prepend the difference before a sequence,
          // and move only the future list index forward, so that aStart
          // and bStart will be aligned again, hence on the fast path.
          // An example considering aStart and bStart are both 0:
          // a: [1, 2, 3, 4]
          // b: [7, 1, 2, 3, 6]
          // this would place 7 before 1 and, from that time on, 1, 2, and 3
          // will be processed at zero cost
          if (sequence > index - bStart) {
            const node = get(a[aStart], 0);
            while (bStart < index) insertBefore(get(b[bStart++], 1), node);
          }
          // if the effort wasn't good enough, fallback to a replace,
          // moving both source and target indexes forward, hoping that some
          // similar node will be found later on, to go back to the fast path
          else {
            replaceChild(get(b[bStart++], 1), get(a[aStart++], -1));
          }
        }
        // otherwise move the source forward, 'cause there's nothing to do
        else aStart++;
      }
      // this node has no meaning in the future list, so it's more than safe
      // to remove it, and check the next live node out instead, meaning
      // that only the live list index should be forwarded
      else removeChild(get(a[aStart++], -1));
    }
  }
  return b
};

const UNMOUNT_SCOPE = Symbol('unmount');

const EachBinding = {
  // dynamic binding properties
  // childrenMap: null,
  // node: null,
  // root: null,
  // condition: null,
  // evaluate: null,
  // template: null,
  // isTemplateTag: false,
  nodes: [],
  // getKey: null,
  // indexName: null,
  // itemName: null,
  // afterPlaceholder: null,
  // placeholder: null,

  // API methods
  mount(scope, parentScope) {
    return this.update(scope, parentScope)
  },
  update(scope, parentScope) {
    const { placeholder, nodes, childrenMap } = this;
    const collection = scope === UNMOUNT_SCOPE ? null : this.evaluate(scope);
    const items = collection ? Array.from(collection) : [];

    // prepare the diffing
    const { newChildrenMap, batches, futureNodes } = createPatch(
      items,
      scope,
      parentScope,
      this,
    );

    // patch the DOM only if there are new nodes
    udomdiff(
      nodes,
      futureNodes,
      patch(Array.from(childrenMap.values()), parentScope),
      placeholder,
    );

    // trigger the mounts and the updates
    batches.forEach((fn) => fn());

    // update the children map
    this.childrenMap = newChildrenMap;
    this.nodes = futureNodes;

    return this
  },
  unmount(scope, parentScope) {
    this.update(UNMOUNT_SCOPE, parentScope);

    return this
  },
};

/**
 * Patch the DOM while diffing
 * @param   {any[]} redundant - list of all the children (template, nodes, context) added via each
 * @param   {*} parentScope - scope of the parent template
 * @returns {Function} patch function used by domdiff
 */
function patch(redundant, parentScope) {
  return (item, info) => {
    if (info < 0) {
      // get the last element added to the childrenMap saved previously
      const element = redundant[redundant.length - 1];

      if (element) {
        // get the nodes and the template in stored in the last child of the childrenMap
        const { template, nodes, context } = element;
        // remove the last node (notice <template> tags might have more children nodes)
        nodes.pop();

        // notice that we pass null as last argument because
        // the root node and its children will be removed by domdiff
        if (!nodes.length) {
          // we have cleared all the children nodes and we can unmount this template
          redundant.pop();
          template.unmount(context, parentScope, null);
        }
      }
    }

    return item
  }
}

/**
 * Check whether a template must be filtered from a loop
 * @param   {Function} condition - filter function
 * @param   {Object} context - argument passed to the filter function
 * @returns {boolean} true if this item should be skipped
 */
function mustFilterItem(condition, context) {
  return condition ? !condition(context) : false
}

/**
 * Extend the scope of the looped template
 * @param   {Object} scope - current template scope
 * @param   {Object} options - options
 * @param   {string} options.itemName - key to identify the looped item in the new context
 * @param   {string} options.indexName - key to identify the index of the looped item
 * @param   {number} options.index - current index
 * @param   {*} options.item - collection item looped
 * @returns {Object} enhanced scope object
 */
function extendScope(scope, { itemName, indexName, index, item }) {
  defineProperty(scope, itemName, item);
  if (indexName) defineProperty(scope, indexName, index);

  return scope
}

/**
 * Loop the current template items
 * @param   {Array} items - expression collection value
 * @param   {*} scope - template scope
 * @param   {*} parentScope - scope of the parent template
 * @param   {EachBinding} binding - each binding object instance
 * @returns {Object} data
 * @returns {Map} data.newChildrenMap - a Map containing the new children template structure
 * @returns {Array} data.batches - array containing the template lifecycle functions to trigger
 * @returns {Array} data.futureNodes - array containing the nodes we need to diff
 */
function createPatch(items, scope, parentScope, binding) {
  const {
    condition,
    template,
    childrenMap,
    itemName,
    getKey,
    indexName,
    root,
    isTemplateTag,
  } = binding;
  const newChildrenMap = new Map();
  const batches = [];
  const futureNodes = [];

  items.forEach((item, index) => {
    const context = extendScope(Object.create(scope), {
      itemName,
      indexName,
      index,
      item,
    });
    const key = getKey ? getKey(context) : index;
    const oldItem = childrenMap.get(key);
    const nodes = [];

    if (mustFilterItem(condition, context)) {
      return
    }

    const mustMount = !oldItem;
    const componentTemplate = oldItem ? oldItem.template : template.clone();
    const el = componentTemplate.el || root.cloneNode();
    const meta =
      isTemplateTag && mustMount
        ? createTemplateMeta(componentTemplate)
        : componentTemplate.meta;

    if (mustMount) {
      batches.push(() =>
        componentTemplate.mount(el, context, parentScope, meta),
      );
    } else {
      batches.push(() => componentTemplate.update(context, parentScope));
    }

    // create the collection of nodes to update or to add
    // in case of template tags we need to add all its children nodes
    if (isTemplateTag) {
      nodes.push(...meta.children);
    } else {
      nodes.push(el);
    }

    // delete the old item from the children map
    childrenMap.delete(key);
    futureNodes.push(...nodes);

    // update the children map
    newChildrenMap.set(key, {
      nodes,
      template: componentTemplate,
      context,
      index,
    });
  });

  return {
    newChildrenMap,
    batches,
    futureNodes,
  }
}

function create$6(
  node,
  { evaluate, condition, itemName, indexName, getKey, template },
) {
  const placeholder = document.createTextNode('');
  const root = node.cloneNode();

  insertBefore(placeholder, node);
  removeChild(node);

  return {
    ...EachBinding,
    childrenMap: new Map(),
    node,
    root,
    condition,
    evaluate,
    isTemplateTag: isTemplate(root),
    template: template.createDOM(node),
    getKey,
    indexName,
    itemName,
    placeholder,
  }
}

/**
 * Binding responsible for the `if` directive
 */
const IfBinding = {
  // dynamic binding properties
  // node: null,
  // evaluate: null,
  // isTemplateTag: false,
  // placeholder: null,
  // template: null,

  // API methods
  mount(scope, parentScope) {
    return this.update(scope, parentScope)
  },
  update(scope, parentScope) {
    const value = !!this.evaluate(scope);
    const mustMount = !this.value && value;
    const mustUnmount = this.value && !value;
    const mount = () => {
      const pristine = this.node.cloneNode();

      insertBefore(pristine, this.placeholder);
      this.template = this.template.clone();
      this.template.mount(pristine, scope, parentScope);
    };

    switch (true) {
      case mustMount:
        mount();
        break
      case mustUnmount:
        this.unmount(scope);
        break
      default:
        if (value) this.template.update(scope, parentScope);
    }

    this.value = value;

    return this
  },
  unmount(scope, parentScope) {
    this.template.unmount(scope, parentScope, true);

    return this
  },
};

function create$5(node, { evaluate, template }) {
  const placeholder = document.createTextNode('');

  insertBefore(placeholder, node);
  removeChild(node);

  return {
    ...IfBinding,
    node,
    evaluate,
    placeholder,
    template: template.createDOM(node),
  }
}

const ElementProto = typeof Element === 'undefined' ? {} : Element.prototype;
const isNativeHtmlProperty = memoize(
  (name) => ElementProto.hasOwnProperty(name), // eslint-disable-line
);

/**
 * Add all the attributes provided
 * @param   {HTMLElement} node - target node
 * @param   {Object} attributes - object containing the attributes names and values
 * @returns {undefined} sorry it's a void function :(
 */
function setAllAttributes(node, attributes) {
  Object.entries(attributes).forEach(([name, value]) =>
    attributeExpression(node, { name }, value),
  );
}

/**
 * Remove all the attributes provided
 * @param   {HTMLElement} node - target node
 * @param   {Object} newAttributes - object containing all the new attribute names
 * @param   {Object} oldAttributes - object containing all the old attribute names
 * @returns {undefined} sorry it's a void function :(
 */
function removeAllAttributes(node, newAttributes, oldAttributes) {
  const newKeys = newAttributes ? Object.keys(newAttributes) : [];

  Object.keys(oldAttributes)
    .filter((name) => !newKeys.includes(name))
    .forEach((attribute) => node.removeAttribute(attribute));
}

/**
 * Check whether the attribute value can be rendered
 * @param {*} value - expression value
 * @returns {boolean} true if we can render this attribute value
 */
function canRenderAttribute(value) {
  return ['string', 'number', 'boolean'].includes(typeof value)
}

/**
 * Check whether the attribute should be removed
 * @param {*} value - expression value
 * @param   {boolean} isBoolean - flag to handle boolean attributes
 * @returns {boolean} boolean - true if the attribute can be removed}
 */
function shouldRemoveAttribute(value, isBoolean) {
  // boolean attributes should be removed if the value is falsy
  if (isBoolean) return !value && value !== 0
  // otherwise we can try to render it
  return typeof value === 'undefined' || value === null
}

/**
 * This methods handles the DOM attributes updates
 * @param   {HTMLElement} node - target node
 * @param   {Object} expression - expression object
 * @param   {string} expression.name - attribute name
 * @param   {boolean} expression.isBoolean - flag to handle boolean attributes
 * @param   {*} value - new expression value
 * @param   {*} oldValue - the old expression cached value
 * @returns {undefined}
 */
function attributeExpression(
  node,
  { name, isBoolean: isBoolean$1 },
  value,
  oldValue,
) {
  // is it a spread operator? {...attributes}
  if (!name) {
    if (oldValue) {
      // remove all the old attributes
      removeAllAttributes(node, value, oldValue);
    }

    // is the value still truthy?
    if (value) {
      setAllAttributes(node, value);
    }

    return
  }

  // store the attribute on the node to make it compatible with native custom elements
  if (
    !isNativeHtmlProperty(name) &&
    (isBoolean(value) || isObject(value) || isFunction(value))
  ) {
    node[name] = value;
  }

  if (shouldRemoveAttribute(value, isBoolean$1)) {
    node.removeAttribute(name);
  } else if (canRenderAttribute(value)) {
    node.setAttribute(name, normalizeValue(name, value, isBoolean$1));
  }
}

/**
 * Get the value as string
 * @param   {string} name - attribute name
 * @param   {*} value - user input value
 * @param   {boolean} isBoolean - boolean attributes flag
 * @returns {string} input value as string
 */
function normalizeValue(name, value, isBoolean) {
  // be sure that expressions like selected={ true } will always be rendered as selected='selected'
  // fix https://github.com/riot/riot/issues/2975
  return value === true && isBoolean ? name : value
}

const RE_EVENTS_PREFIX = /^on/;

const getCallbackAndOptions = (value) =>
  Array.isArray(value) ? value : [value, false];

// see also https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38
const EventListener = {
  handleEvent(event) {
    this[event.type](event);
  },
};
const ListenersWeakMap = new WeakMap();

const createListener = (node) => {
  const listener = Object.create(EventListener);
  ListenersWeakMap.set(node, listener);
  return listener
};

/**
 * Set a new event listener
 * @param   {HTMLElement} node - target node
 * @param   {Object} expression - expression object
 * @param   {string} expression.name - event name
 * @param   {*} value - new expression value
 * @returns {value} the callback just received
 */
function eventExpression(node, { name }, value) {
  const normalizedEventName = name.replace(RE_EVENTS_PREFIX, '');
  const eventListener = ListenersWeakMap.get(node) || createListener(node);
  const [callback, options] = getCallbackAndOptions(value);
  const handler = eventListener[normalizedEventName];
  const mustRemoveEvent = handler && !callback;
  const mustAddEvent = callback && !handler;

  if (mustRemoveEvent) {
    node.removeEventListener(normalizedEventName, eventListener);
  }

  if (mustAddEvent) {
    node.addEventListener(normalizedEventName, eventListener, options);
  }

  eventListener[normalizedEventName] = callback;
}

/**
 * Normalize the user value in order to render a empty string in case of falsy values
 * @param   {*} value - user input value
 * @returns {string} hopefully a string
 */
function normalizeStringValue(value) {
  return isNil(value) ? '' : value
}

/**
 * Get the the target text node to update or create one from of a comment node
 * @param   {HTMLElement} node - any html element containing childNodes
 * @param   {number} childNodeIndex - index of the text node in the childNodes list
 * @returns {Text} the text node to update
 */
const getTextNode = (node, childNodeIndex) => {
  const target = node.childNodes[childNodeIndex];

  if (target.nodeType === Node.COMMENT_NODE) {
    const textNode = document.createTextNode('');
    node.replaceChild(textNode, target);

    return textNode
  }

  return target
};

/**
 * This methods handles a simple text expression update
 * @param   {HTMLElement} node - target node
 * @param   {Object} data - expression object
 * @param   {*} value - new expression value
 * @returns {undefined}
 */
function textExpression(node, data, value) {
  node.data = normalizeStringValue(value);
}

/**
 * This methods handles the input fields value updates
 * @param   {HTMLElement} node - target node
 * @param   {Object} expression - expression object
 * @param   {*} value - new expression value
 * @returns {undefined}
 */
function valueExpression(node, expression, value) {
  node.value = normalizeStringValue(value);
}

const expressions = {
  [ATTRIBUTE]: attributeExpression,
  [EVENT]: eventExpression,
  [TEXT]: textExpression,
  [VALUE]: valueExpression,
};

const Expression = {
  // Static props
  // node: null,
  // value: null,

  // API methods
  /**
   * Mount the expression evaluating its initial value
   * @param   {*} scope - argument passed to the expression to evaluate its current values
   * @returns {Expression} self
   */
  mount(scope) {
    // hopefully a pure function
    this.value = this.evaluate(scope);

    // IO() DOM updates
    apply(this, this.value);

    return this
  },
  /**
   * Update the expression if its value changed
   * @param   {*} scope - argument passed to the expression to evaluate its current values
   * @returns {Expression} self
   */
  update(scope) {
    // pure function
    const value = this.evaluate(scope);

    if (this.value !== value) {
      // IO() DOM updates
      apply(this, value);
      this.value = value;
    }

    return this
  },
  /**
   * Expression teardown method
   * @returns {Expression} self
   */
  unmount() {
    // unmount only the event handling expressions
    if (this.type === EVENT) apply(this, null);

    return this
  },
};

/**
 * IO() function to handle the DOM updates
 * @param {Expression} expression - expression object
 * @param {*} value - current expression value
 * @returns {undefined}
 */
function apply(expression, value) {
  return expressions[expression.type](
    expression.node,
    expression,
    value,
    expression.value,
  )
}

function create$4(node, data) {
  return {
    ...Expression,
    ...data,
    node: data.type === TEXT ? getTextNode(node, data.childNodeIndex) : node,
  }
}

/**
 * Create a flat object having as keys a list of methods that if dispatched will propagate
 * on the whole collection
 * @param   {Array} collection - collection to iterate
 * @param   {Array<string>} methods - methods to execute on each item of the collection
 * @param   {*} context - context returned by the new methods created
 * @returns {Object} a new object to simplify the the nested methods dispatching
 */
function flattenCollectionMethods(collection, methods, context) {
  return methods.reduce((acc, method) => {
    return {
      ...acc,
      [method]: (scope) => {
        return collection.map((item) => item[method](scope)) && context
      },
    }
  }, {})
}

function create$3(node, { expressions }) {
  return {
    ...flattenCollectionMethods(
      expressions.map((expression) => create$4(node, expression)),
      ['mount', 'update', 'unmount'],
    ),
  }
}

function extendParentScope(attributes, scope, parentScope) {
  if (!attributes || !attributes.length) return parentScope

  const expressions = attributes.map((attr) => ({
    ...attr,
    value: attr.evaluate(scope),
  }));

  return Object.assign(
    Object.create(parentScope || null),
    evaluateAttributeExpressions(expressions),
  )
}

// this function is only meant to fix an edge case
// https://github.com/riot/riot/issues/2842
const getRealParent = (scope, parentScope) =>
  scope[PARENT_KEY_SYMBOL] || parentScope;

const SlotBinding = {
  // dynamic binding properties
  // node: null,
  // name: null,
  attributes: [],
  // template: null,

  getTemplateScope(scope, parentScope) {
    return extendParentScope(this.attributes, scope, parentScope)
  },

  // API methods
  mount(scope, parentScope) {
    const templateData = scope.slots
      ? scope.slots.find(({ id }) => id === this.name)
      : false;
    const { parentNode } = this.node;
    const realParent = getRealParent(scope, parentScope);

    this.template =
      templateData &&
      create(templateData.html, templateData.bindings).createDOM(parentNode);

    if (this.template) {
      cleanNode(this.node);
      this.template.mount(
        this.node,
        this.getTemplateScope(scope, realParent),
        realParent,
      );
      this.template.children = Array.from(this.node.childNodes);
    }

    moveSlotInnerContent(this.node);
    removeChild(this.node);

    return this
  },
  update(scope, parentScope) {
    if (this.template) {
      const realParent = getRealParent(scope, parentScope);
      this.template.update(this.getTemplateScope(scope, realParent), realParent);
    }

    return this
  },
  unmount(scope, parentScope, mustRemoveRoot) {
    if (this.template) {
      this.template.unmount(
        this.getTemplateScope(scope, parentScope),
        null,
        mustRemoveRoot,
      );
    }

    return this
  },
};

/**
 * Move the inner content of the slots outside of them
 * @param   {HTMLElement} slot - slot node
 * @returns {undefined} it's a void method ¯\_(ツ)_/¯
 */
function moveSlotInnerContent(slot) {
  const child = slot && slot.firstChild;

  if (!child) return

  insertBefore(child, slot);
  moveSlotInnerContent(slot);
}

/**
 * Create a single slot binding
 * @param   {HTMLElement} node - slot node
 * @param   {string} name - slot id
 * @param   {AttributeExpressionData[]} attributes - slot attributes
 * @returns {Object} Slot binding object
 */
function createSlot(node, { name, attributes }) {
  return {
    ...SlotBinding,
    attributes,
    node,
    name,
  }
}

/**
 * Create a new tag object if it was registered before, otherwise fallback to the simple
 * template chunk
 * @param   {Function} component - component factory function
 * @param   {Array<Object>} slots - array containing the slots markup
 * @param   {Array} attributes - dynamic attributes that will be received by the tag element
 * @returns {TagImplementation|TemplateChunk} a tag implementation or a template chunk as fallback
 */
function getTag(component, slots = [], attributes = []) {
  // if this tag was registered before we will return its implementation
  if (component) {
    return component({ slots, attributes })
  }

  // otherwise we return a template chunk
  return create(slotsToMarkup(slots), [
    ...slotBindings(slots),
    {
      // the attributes should be registered as binding
      // if we fallback to a normal template chunk
      expressions: attributes.map((attr) => {
        return {
          type: ATTRIBUTE,
          ...attr,
        }
      }),
    },
  ])
}

/**
 * Merge all the slots bindings into a single array
 * @param   {Array<Object>} slots - slots collection
 * @returns {Array<Bindings>} flatten bindings array
 */
function slotBindings(slots) {
  return slots.reduce((acc, { bindings }) => acc.concat(bindings), [])
}

/**
 * Merge all the slots together in a single markup string
 * @param   {Array<Object>} slots - slots collection
 * @returns {string} markup of all the slots in a single string
 */
function slotsToMarkup(slots) {
  return slots.reduce((acc, slot) => {
    return acc + slot.html
  }, '')
}

const TagBinding = {
  // dynamic binding properties
  // node: null,
  // evaluate: null,
  // name: null,
  // slots: null,
  // tag: null,
  // attributes: null,
  // getComponent: null,

  mount(scope) {
    return this.update(scope)
  },
  update(scope, parentScope) {
    const name = this.evaluate(scope);

    // simple update
    if (name && name === this.name) {
      this.tag.update(scope);
    } else {
      // unmount the old tag if it exists
      this.unmount(scope, parentScope, true);

      // mount the new tag
      this.name = name;
      this.tag = getTag(this.getComponent(name), this.slots, this.attributes);
      this.tag.mount(this.node, scope);
    }

    return this
  },
  unmount(scope, parentScope, keepRootTag) {
    if (this.tag) {
      // keep the root tag
      this.tag.unmount(keepRootTag);
    }

    return this
  },
};

function create$2(
  node,
  { evaluate, getComponent, slots, attributes },
) {
  return {
    ...TagBinding,
    node,
    evaluate,
    slots,
    attributes,
    getComponent,
  }
}

const bindings = {
  [IF]: create$5,
  [SIMPLE]: create$3,
  [EACH]: create$6,
  [TAG]: create$2,
  [SLOT]: createSlot,
};

/**
 * Text expressions in a template tag will get childNodeIndex value normalized
 * depending on the position of the <template> tag offset
 * @param   {Expression[]} expressions - riot expressions array
 * @param   {number} textExpressionsOffset - offset of the <template> tag
 * @returns {Expression[]} expressions containing the text expressions normalized
 */
function fixTextExpressionsOffset(expressions, textExpressionsOffset) {
  return expressions.map((e) =>
    e.type === TEXT
      ? {
          ...e,
          childNodeIndex: e.childNodeIndex + textExpressionsOffset,
        }
      : e,
  )
}

/**
 * Bind a new expression object to a DOM node
 * @param   {HTMLElement} root - DOM node where to bind the expression
 * @param   {TagBindingData} binding - binding data
 * @param   {number|null} templateTagOffset - if it's defined we need to fix the text expressions childNodeIndex offset
 * @returns {Binding} Binding object
 */
function create$1(root, binding, templateTagOffset) {
  const { selector, type, redundantAttribute, expressions } = binding;
  // find the node to apply the bindings
  const node = selector ? root.querySelector(selector) : root;

  // remove eventually additional attributes created only to select this node
  if (redundantAttribute) node.removeAttribute(redundantAttribute);
  const bindingExpressions = expressions || [];

  // init the binding
  return (bindings[type] || bindings[SIMPLE])(node, {
    ...binding,
    expressions:
      templateTagOffset && !selector
        ? fixTextExpressionsOffset(bindingExpressions, templateTagOffset)
        : bindingExpressions,
  })
}

// in this case a simple innerHTML is enough
function createHTMLTree(html, root) {
  const template = isTemplate(root) ? root : document.createElement('template');
  template.innerHTML = html;
  return template.content
}

// for svg nodes we need a bit more work
/* c8 ignore start */
function createSVGTree(html, container) {
  // create the SVGNode
  const svgNode = container.ownerDocument.importNode(
    new window.DOMParser().parseFromString(
      `<svg xmlns="http://www.w3.org/2000/svg">${html}</svg>`,
      'application/xml',
    ).documentElement,
    true,
  );

  return svgNode
}
/* c8 ignore end */

/**
 * Create the DOM that will be injected
 * @param {Object} root - DOM node to find out the context where the fragment will be created
 * @param   {string} html - DOM to create as string
 * @returns {HTMLDocumentFragment|HTMLElement} a new html fragment
 */
function createDOMTree(root, html) {
  /* c8 ignore next */
  if (isSvg(root)) return createSVGTree(html, root)

  return createHTMLTree(html, root)
}

/**
 * Inject the DOM tree into a target node
 * @param   {HTMLElement} el - target element
 * @param   {DocumentFragment|SVGElement} dom - dom tree to inject
 * @returns {undefined}
 */
function injectDOM(el, dom) {
  switch (true) {
    case isSvg(el):
      moveChildren(dom, el);
      break
    case isTemplate(el):
      el.parentNode.replaceChild(dom, el);
      break
    default:
      el.appendChild(dom);
  }
}

/**
 * Create the Template DOM skeleton
 * @param   {HTMLElement} el - root node where the DOM will be injected
 * @param   {string|HTMLElement} html - HTML markup or HTMLElement that will be injected into the root node
 * @returns {?DocumentFragment} fragment that will be injected into the root node
 */
function createTemplateDOM(el, html) {
  return html && (typeof html === 'string' ? createDOMTree(el, html) : html)
}

/**
 * Get the offset of the <template> tag
 * @param {HTMLElement} parentNode - template tag parent node
 * @param {HTMLElement} el - the template tag we want to render
 * @param   {Object} meta - meta properties needed to handle the <template> tags in loops
 * @returns {number} offset of the <template> tag calculated from its siblings DOM nodes
 */
function getTemplateTagOffset(parentNode, el, meta) {
  const siblings = Array.from(parentNode.childNodes);

  return Math.max(siblings.indexOf(el), siblings.indexOf(meta.head) + 1, 0)
}

/**
 * Template Chunk model
 * @type {Object}
 */
const TemplateChunk = {
  // Static props
  // bindings: null,
  // bindingsData: null,
  // html: null,
  // isTemplateTag: false,
  // fragment: null,
  // children: null,
  // dom: null,
  // el: null,

  /**
   * Create the template DOM structure that will be cloned on each mount
   * @param   {HTMLElement} el - the root node
   * @returns {TemplateChunk} self
   */
  createDOM(el) {
    // make sure that the DOM gets created before cloning the template
    this.dom =
      this.dom ||
      createTemplateDOM(el, this.html) ||
      document.createDocumentFragment();

    return this
  },

  // API methods
  /**
   * Attach the template to a DOM node
   * @param   {HTMLElement} el - target DOM node
   * @param   {*} scope - template data
   * @param   {*} parentScope - scope of the parent template tag
   * @param   {Object} meta - meta properties needed to handle the <template> tags in loops
   * @returns {TemplateChunk} self
   */
  mount(el, scope, parentScope, meta = {}) {
    if (!el) panic$4('Please provide DOM node to mount properly your template');

    if (this.el) this.unmount(scope);

    // <template> tags require a bit more work
    // the template fragment might be already created via meta outside of this call
    const { fragment, children, avoidDOMInjection } = meta;
    // <template> bindings of course can not have a root element
    // so we check the parent node to set the query selector bindings
    const { parentNode } = children ? children[0] : el;
    const isTemplateTag = isTemplate(el);
    const templateTagOffset = isTemplateTag
      ? getTemplateTagOffset(parentNode, el, meta)
      : null;

    // create the DOM if it wasn't created before
    this.createDOM(el);

    // create the DOM of this template cloning the original DOM structure stored in this instance
    // notice that if a documentFragment was passed (via meta) we will use it instead
    const cloneNode = fragment || this.dom.cloneNode(true);

    // store root node
    // notice that for template tags the root note will be the parent tag
    this.el = isTemplateTag ? parentNode : el;

    // create the children array only for the <template> fragments
    this.children = isTemplateTag
      ? children || Array.from(cloneNode.childNodes)
      : null;

    // inject the DOM into the el only if a fragment is available
    if (!avoidDOMInjection && cloneNode) injectDOM(el, cloneNode);

    // create the bindings
    this.bindings = this.bindingsData.map((binding) =>
      create$1(this.el, binding, templateTagOffset),
    );
    this.bindings.forEach((b) => b.mount(scope, parentScope));

    // store the template meta properties
    this.meta = meta;

    return this
  },

  /**
   * Update the template with fresh data
   * @param   {*} scope - template data
   * @param   {*} parentScope - scope of the parent template tag
   * @returns {TemplateChunk} self
   */
  update(scope, parentScope) {
    this.bindings.forEach((b) => b.update(scope, parentScope));

    return this
  },

  /**
   * Remove the template from the node where it was initially mounted
   * @param   {*} scope - template data
   * @param   {*} parentScope - scope of the parent template tag
   * @param   {boolean|null} mustRemoveRoot - if true remove the root element,
   * if false or undefined clean the root tag content, if null don't touch the DOM
   * @returns {TemplateChunk} self
   */
  unmount(scope, parentScope, mustRemoveRoot = false) {
    const el = this.el;

    if (!el) {
      return this
    }

    this.bindings.forEach((b) => b.unmount(scope, parentScope, mustRemoveRoot));

    switch (true) {
      // pure components should handle the DOM unmount updates by themselves
      // for mustRemoveRoot === null don't touch the DOM
      case el[IS_PURE_SYMBOL] || mustRemoveRoot === null:
        break

      // if children are declared, clear them
      // applicable for <template> and <slot/> bindings
      case Array.isArray(this.children):
        clearChildren(this.children);
        break

      // clean the node children only
      case !mustRemoveRoot:
        cleanNode(el);
        break

      // remove the root node only if the mustRemoveRoot is truly
      case !!mustRemoveRoot:
        removeChild(el);
        break
    }

    this.el = null;

    return this
  },

  /**
   * Clone the template chunk
   * @returns {TemplateChunk} a clone of this object resetting the this.el property
   */
  clone() {
    return {
      ...this,
      meta: {},
      el: null,
    }
  },
};

/**
 * Create a template chunk wiring also the bindings
 * @param   {string|HTMLElement} html - template string
 * @param   {BindingData[]} bindings - bindings collection
 * @returns {TemplateChunk} a new TemplateChunk copy
 */
function create(html, bindings = []) {
  return {
    ...TemplateChunk,
    html,
    bindingsData: bindings,
  }
}

/* Riot v9.1.2, @license MIT */

/**
 * Factory function to create the component templates only once
 * @param   {Function} template - component template creation function
 * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object
 * @param   {Function} getChildComponent - getter function to return the children components
 * @returns {TemplateChunk} template chunk object
 */
function componentTemplateFactory(
  template,
  componentWrapper,
  getChildComponent,
) {
  return template(
    create,
    expressionTypes,
    bindingTypes,
    getChildComponent,
  )
}

/* Riot v9.1.2, @license MIT */

const PURE_COMPONENT_API = Object.freeze({
  [MOUNT_METHOD_KEY]: noop,
  [UPDATE_METHOD_KEY]: noop,
  [UNMOUNT_METHOD_KEY]: noop,
});

/* Riot v9.1.2, @license MIT */

/**
 * Bind a DOM node to its component object
 * @param   {HTMLElement} node - html node mounted
 * @param   {Object} component - Riot.js component object
 * @returns {Object} the component object received as second argument
 */
const bindDOMNodeToComponentInstance = (node, component) =>
  (node[DOM_COMPONENT_INSTANCE_PROPERTY] = component);

/* Riot v9.1.2, @license MIT */

/**
 * Wrap the Riot.js core API methods using a mapping function
 * @param   {Function} mapFunction - lifting function
 * @returns {Object} an object having the { mount, update, unmount } functions
 */
function createCoreAPIMethods(mapFunction) {
  return [MOUNT_METHOD_KEY, UPDATE_METHOD_KEY, UNMOUNT_METHOD_KEY].reduce(
    (acc, method) => {
      acc[method] = mapFunction(method);

      return acc
    },
    {},
  )
}

/* Riot v9.1.2, @license MIT */

/**
 * Create a pure component
 * @param   {Function} pureFactoryFunction - pure component factory function
 * @param   {Array} options.slots - component slots
 * @param   {Array} options.attributes - component attributes
 * @param   {Array} options.template - template factory function
 * @param   {Array} options.template - template factory function
 * @param   {any} options.props - initial component properties
 * @returns {Object} pure component object
 */
function createPureComponent(
  pureFactoryFunction,
  { slots, attributes, props, css, template },
) {
  if (template) panic$4('Pure components can not have html');
  if (css) panic$4('Pure components do not have css');

  const component = defineDefaults(
    pureFactoryFunction({ slots, attributes, props }),
    PURE_COMPONENT_API,
  );

  return createCoreAPIMethods((method) => (...args) => {
    // intercept the mount calls to bind the DOM node to the pure object created
    // see also https://github.com/riot/riot/issues/2806
    if (method === MOUNT_METHOD_KEY) {
      const [element] = args;
      // mark this node as pure element
      defineProperty(element, IS_PURE_SYMBOL, true);
      bindDOMNodeToComponentInstance(element, component);
    }

    component[method](...args);

    return component
  })
}

/* Riot WIP, @license MIT */
/**
 * Converts any DOM node/s to a loopable array
 * @param   { HTMLElement|NodeList } els - single html element or a node list
 * @returns { Array } always a loopable object
 */
function domToArray$1(els) {
  // can this object be already looped?
  if (!Array.isArray(els)) {
    // is it a node list?
    if (
      /^\[object (HTMLCollection|NodeList|Object)\]$/
        .test(Object.prototype.toString.call(els))
        && typeof els.length === 'number'
    )
      return Array.from(els)
    else
      // if it's a single node
      // it will be returned as "array" with one single entry
      return [els]
  }
  // this object could be looped out of the box
  return els
}

/* Riot WIP, @license MIT */

/**
 * Simple helper to find DOM nodes returning them as array like loopable object
 * @param   { string|DOMNodeList } selector - either the query or the DOM nodes to arraify
 * @param   { HTMLElement }        scope      - context defining where the query will search for the DOM nodes
 * @returns { Array } DOM nodes found as array
 */
function $$1(selector, scope) {
  return domToArray$1(typeof selector === 'string' ?
    (scope || document).querySelectorAll(selector) :
    selector
  )
}

/* Riot v9.1.2, @license MIT */

const COMPONENT_DOM_SELECTORS = Object.freeze({
  // component helpers
  $(selector) {
    return $$1(selector, this.root)[0]
  },
  $$(selector) {
    return $$1(selector, this.root)
  },
});

/* Riot v9.1.2, @license MIT */

const COMPONENT_LIFECYCLE_METHODS = Object.freeze({
  [SHOULD_UPDATE_KEY]: noop,
  [ON_BEFORE_MOUNT_KEY]: noop,
  [ON_MOUNTED_KEY]: noop,
  [ON_BEFORE_UPDATE_KEY]: noop,
  [ON_UPDATED_KEY]: noop,
  [ON_BEFORE_UNMOUNT_KEY]: noop,
  [ON_UNMOUNTED_KEY]: noop,
});

/* Riot WIP, @license MIT */

/**
 * Normalize the return values, in case of a single value we avoid to return an array
 * @param   { Array } values - list of values we want to return
 * @returns { Array|string|boolean } either the whole list of values or the single one found
 * @private
 */
const normalize$1 = values => values.length === 1 ? values[0] : values;

/**
 * Parse all the nodes received to get/remove/check their attributes
 * @param   { HTMLElement|NodeList|Array } els    - DOM node/s to parse
 * @param   { string|Array }               name   - name or list of attributes
 * @param   { string }                     method - method that will be used to parse the attributes
 * @returns { Array|string } result of the parsing in a list or a single value
 * @private
 */
function parseNodes$1(els, name, method) {
  const names = typeof name === 'string' ? [name] : name;
  return normalize$1(domToArray$1(els).map(el => {
    return normalize$1(names.map(n => el[method](n)))
  }))
}

/**
 * Set any attribute on a single or a list of DOM nodes
 * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse
 * @param   { string|Object }              name  - either the name of the attribute to set
 *                                                 or a list of properties as object key - value
 * @param   { string }                     value - the new value of the attribute (optional)
 * @returns { HTMLElement|NodeList|Array } the original array of elements passed to this function
 *
 * @example
 *
 * import { set } from 'bianco.attr'
 *
 * const img = document.createElement('img')
 *
 * set(img, 'width', 100)
 *
 * // or also
 * set(img, {
 *   width: 300,
 *   height: 300
 * })
 *
 */
function set(els, name, value) {
  const attrs = typeof name === 'object' ? name : { [name]: value };
  const props = Object.keys(attrs);

  domToArray$1(els).forEach(el => {
    props.forEach(prop => el.setAttribute(prop, attrs[prop]));
  });
  return els
}

/**
 * Get any attribute from a single or a list of DOM nodes
 * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse
 * @param   { string|Array }               name  - name or list of attributes to get
 * @returns { Array|string } list of the attributes found
 *
 * @example
 *
 * import { get } from 'bianco.attr'
 *
 * const img = document.createElement('img')
 *
 * get(img, 'width') // => '200'
 *
 * // or also
 * get(img, ['width', 'height']) // => ['200', '300']
 *
 * // or also
 * get([img1, img2], ['width', 'height']) // => [['200', '300'], ['500', '200']]
 */
function get$1(els, name) {
  return parseNodes$1(els, name, 'getAttribute')
}

/* Riot v9.1.2, @license MIT */

const CSS_BY_NAME = new Map();
const STYLE_NODE_SELECTOR = 'style[riot]';

// memoized curried function
const getStyleNode = ((style) => {
  return () => {
    // lazy evaluation:
    // if this function was already called before
    // we return its cached result
    if (style) return style

    // create a new style element or use an existing one
    // and cache it internally
    style = $$1(STYLE_NODE_SELECTOR)[0] || document.createElement('style');
    set(style, 'type', 'text/css');

    /* istanbul ignore next */
    if (!style.parentNode) document.head.appendChild(style);

    return style
  }
})();

/**
 * Object that will be used to inject and manage the css of every tag instance
 */
const cssManager = {
  CSS_BY_NAME,
  /**
   * Save a tag style to be later injected into DOM
   * @param { string } name - if it's passed we will map the css to a tagname
   * @param { string } css - css string
   * @returns {Object} self
   */
  add(name, css) {
    if (!CSS_BY_NAME.has(name)) {
      CSS_BY_NAME.set(name, css);
      this.inject();
    }

    return this
  },
  /**
   * Inject all previously saved tag styles into DOM
   * innerHTML seems slow: http://jsperf.com/riot-insert-style
   * @returns {Object} self
   */
  inject() {
    getStyleNode().innerHTML = [...CSS_BY_NAME.values()].join('\n');
    return this
  },

  /**
   * Remove a tag style from the DOM
   * @param {string} name a registered tagname
   * @returns {Object} self
   */
  remove(name) {
    if (CSS_BY_NAME.has(name)) {
      CSS_BY_NAME.delete(name);
      this.inject();
    }

    return this
  },
};

/* Riot WIP, @license MIT */
/**
 * Function to curry any javascript method
 * @param   {Function}  fn - the target function we want to curry
 * @param   {...[args]} acc - initial arguments
 * @returns {Function|*} it will return a function until the target function
 *                       will receive all of its arguments
 */
function curry(fn, ...acc) {
  return (...args) => {
    args = [...acc, ...args];

    return args.length < fn.length ?
      curry(fn, ...args) :
      fn(...args)
  }
}

/* Riot v9.1.2, @license MIT */

/**
 * Get the tag name of any DOM node
 * @param   {HTMLElement} element - DOM node we want to inspect
 * @returns {string} name to identify this dom node in riot
 */
function getName(element) {
  return get$1(element, IS_DIRECTIVE) || element.tagName.toLowerCase()
}

/* Riot v9.1.2, @license MIT */

/**
 * Add eventually the "is" attribute to link this DOM node to its css
 * @param {HTMLElement} element - target root node
 * @param {string} name - name of the component mounted
 * @returns {undefined} it's a void function
 */

function addCssHook(element, name) {
  if (getName(element) !== name) {
    set(element, IS_DIRECTIVE, name);
  }
}

/* Riot v9.1.2, @license MIT */

/**
 * Compute the component current state merging it with its previous state
 * @param   {Object} oldState - previous state object
 * @param   {Object} newState - new state given to the `update` call
 * @returns {Object} new object state
 */
function computeComponentState(oldState, newState) {
  return {
    ...oldState,
    ...callOrAssign(newState),
  }
}

/* Riot v9.1.2, @license MIT */

/**
 * Evaluate the component properties either from its real attributes or from its initial user properties
 * @param   {HTMLElement} element - component root
 * @param   {Object}  initialProps - initial props
 * @returns {Object} component props key value pairs
 */
function computeInitialProps(element, initialProps = {}) {
  return {
    ...DOMattributesToObject(element),
    ...callOrAssign(initialProps),
  }
}

/* Riot v9.1.2, @license MIT */

/**
 * Create the bindings to update the component attributes
 * @param   {HTMLElement} node - node where we will bind the expressions
 * @param   {Array} attributes - list of attribute bindings
 * @returns {TemplateChunk} - template bindings object
 */
function createAttributeBindings(node, attributes = []) {
  const expressions = attributes.map((a) => create$4(node, a));
  const binding = {};

  return Object.assign(binding, {
    expressions,
    ...createCoreAPIMethods((method) => (scope) => {
      expressions.forEach((e) => e[method](scope));

      return binding
    }),
  })
}

/* Riot v9.1.2, @license MIT */

/**
 * Run the component instance through all the plugins set by the user
 * @param   {Object} component - component instance
 * @returns {Object} the component enhanced by the plugins
 */
function runPlugins(component) {
  return [...PLUGINS_SET].reduce((c, fn) => fn(c) || c, component)
}

/* Riot v9.1.2, @license MIT */

/**
 * Component creation factory function that will enhance the user provided API
 * @param   {Object} component - a component implementation previously defined
 * @param   {Array} options.slots - component slots generated via riot compiler
 * @param   {Array} options.attributes - attribute expressions generated via riot compiler
 * @returns {Riot.Component} a riot component instance
 */
function manageComponentLifecycle(
  component,
  { slots, attributes, props },
) {
  return autobindMethods(
    runPlugins(
      defineProperties(
        isObject(component) ? Object.create(component) : component,
        {
          mount(element, state = {}, parentScope) {
            // any element mounted passing through this function can't be a pure component
            defineProperty(element, IS_PURE_SYMBOL, false);
            this[PARENT_KEY_SYMBOL] = parentScope;
            this[ATTRIBUTES_KEY_SYMBOL] = createAttributeBindings(
              element,
              attributes,
            ).mount(parentScope);

            defineProperty(
              this,
              PROPS_KEY,
              Object.freeze({
                ...computeInitialProps(element, props),
                ...evaluateAttributeExpressions(
                  this[ATTRIBUTES_KEY_SYMBOL].expressions,
                ),
              }),
            );

            this[STATE_KEY] = computeComponentState(this[STATE_KEY], state);
            this[TEMPLATE_KEY_SYMBOL] = this.template.createDOM(element).clone();

            // link this object to the DOM node
            bindDOMNodeToComponentInstance(element, this);
            // add eventually the 'is' attribute
            component.name && addCssHook(element, component.name);

            // define the root element
            defineProperty(this, ROOT_KEY, element);
            // define the slots array
            defineProperty(this, SLOTS_KEY, slots);

            // before mount lifecycle event
            this[ON_BEFORE_MOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]);
            // mount the template
            this[TEMPLATE_KEY_SYMBOL].mount(element, this, parentScope);
            this[ON_MOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);

            return this
          },
          update(state = {}, parentScope) {
            if (parentScope) {
              this[PARENT_KEY_SYMBOL] = parentScope;
              this[ATTRIBUTES_KEY_SYMBOL].update(parentScope);
            }

            // Avoid adding the riot "is" directives to the component props
            // eslint-disable-next-line no-unused-vars
            const { [IS_DIRECTIVE]: _, ...newProps } = {
              // make sure that the root node attributes will be always parsed
              ...DOMattributesToObject(this[ROOT_KEY]),
              ...evaluateAttributeExpressions(
                this[ATTRIBUTES_KEY_SYMBOL].expressions,
              ),
            };

            if (this[SHOULD_UPDATE_KEY](newProps, this[PROPS_KEY]) === false)
              return

            defineProperty(
              this,
              PROPS_KEY,
              Object.freeze({
                // only root components will merge their initial props with the new ones
                // children components will just get them overridden see also https://github.com/riot/riot/issues/2978
                ...(parentScope ? null : this[PROPS_KEY]),
                ...newProps,
              }),
            );

            this[STATE_KEY] = computeComponentState(this[STATE_KEY], state);

            this[ON_BEFORE_UPDATE_KEY](this[PROPS_KEY], this[STATE_KEY]);

            // avoiding recursive updates
            // see also https://github.com/riot/riot/issues/2895
            if (!this[IS_COMPONENT_UPDATING]) {
              this[IS_COMPONENT_UPDATING] = true;
              this[TEMPLATE_KEY_SYMBOL].update(this, this[PARENT_KEY_SYMBOL]);
            }

            this[ON_UPDATED_KEY](this[PROPS_KEY], this[STATE_KEY]);
            this[IS_COMPONENT_UPDATING] = false;

            return this
          },
          unmount(preserveRoot) {
            this[ON_BEFORE_UNMOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]);
            this[ATTRIBUTES_KEY_SYMBOL].unmount();
            // if the preserveRoot is null the template html will be left untouched
            // in that case the DOM cleanup will happen differently from a parent node
            this[TEMPLATE_KEY_SYMBOL].unmount(
              this,
              this[PARENT_KEY_SYMBOL],
              preserveRoot === null ? null : !preserveRoot,
            );
            this[ON_UNMOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);

            return this
          },
        },
      ),
    ),
    Object.keys(component).filter((prop) => isFunction(component[prop])),
  )
}

/* Riot v9.1.2, @license MIT */

/**
 * Component definition function
 * @param   {Object} implementation - the component implementation will be generated via compiler
 * @param   {Object} component - the component initial properties
 * @returns {Object} a new component implementation object
 */
function instantiateComponent({ css, template, componentAPI, name }) {
  // add the component css into the DOM
  if (css && name) cssManager.add(name, css);

  return curry(manageComponentLifecycle)(
    defineProperties(
      // set the component defaults without overriding the original component API
      defineDefaults(componentAPI, {
        ...COMPONENT_LIFECYCLE_METHODS,
        [PROPS_KEY]: {},
        [STATE_KEY]: {},
      }),
      {
        // defined during the component creation
        [SLOTS_KEY]: null,
        [ROOT_KEY]: null,
        // these properties should not be overriden
        ...COMPONENT_DOM_SELECTORS,
        name,
        css,
        template,
      },
    ),
  )
}

/* Riot v9.1.2, @license MIT */

/**
 * Create the subcomponents that can be included inside a tag in runtime
 * @param   {Object} components - components imported in runtime
 * @returns {Object} all the components transformed into Riot.Component factory functions
 */
function createChildrenComponentsObject(components = {}) {
  return Object.entries(callOrAssign(components)).reduce(
    (acc, [key, value]) => {
      acc[camelToDashCase(key)] = createComponentFromWrapper(value);
      return acc
    },
    {},
  )
}

/**
 * Create the getter function to render the child components
 * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object
 * @returns {Function} function returning the component factory function
 */
const createChildComponentGetter = (componentWrapper) => {
  const childrenComponents = createChildrenComponentsObject(
    componentWrapper.exports ? componentWrapper.exports.components : {},
  );

  return (name) => {
    // improve support for recursive components
    if (name === componentWrapper.name)
      return memoizedCreateComponentFromWrapper(componentWrapper)
    // return the registered components
    return childrenComponents[name] || COMPONENTS_IMPLEMENTATION_MAP.get(name)
  }
};

/**
 * Performance optimization for the recursive components
 * @param  {RiotComponentWrapper} componentWrapper - riot compiler generated object
 * @returns {Object} component like interface
 */
const memoizedCreateComponentFromWrapper = memoize(createComponentFromWrapper);

/**
 * Create the component interface needed for the @riotjs/dom-bindings tag bindings
 * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object
 * @param   {string} componentWrapper.css - component css
 * @param   {Function} componentWrapper.template - function that will return the dom-bindings template function
 * @param   {Object} componentWrapper.exports - component interface
 * @param   {string} componentWrapper.name - component name
 * @returns {Object} component like interface
 */
function createComponentFromWrapper(componentWrapper) {
  const { css, template, exports, name } = componentWrapper;
  const templateFn = template
    ? componentTemplateFactory(
        template,
        componentWrapper,
        createChildComponentGetter(componentWrapper),
      )
    : MOCKED_TEMPLATE_INTERFACE;

  return ({ slots, attributes, props }) => {
    // pure components rendering will be managed by the end user
    if (exports && exports[IS_PURE_SYMBOL])
      return createPureComponent(exports, {
        slots,
        attributes,
        props,
        css,
        template,
      })

    const componentAPI = callOrAssign(exports) || {};

    const component = instantiateComponent({
      css,
      template: templateFn,
      componentAPI,
      name,
    })({ slots, attributes, props });

    // notice that for the components created via tag binding
    // we need to invert the mount (state/parentScope) arguments
    // the template bindings will only forward the parentScope updates
    // and never deal with the component state
    return {
      mount(element, parentScope, state) {
        return component.mount(element, state, parentScope)
      },
      update(parentScope, state) {
        return component.update(state, parentScope)
      },
      unmount(preserveRoot) {
        return component.unmount(preserveRoot)
      },
    }
  }
}

/* Riot WIP, @license MIT */
/**
 * Similar to compose but performs from left-to-right function composition.<br/>
 * {@link https://30secondsofcode.org/function#composeright see also}
 * @param   {...[function]} fns) - list of unary function
 * @returns {*} result of the computation
 */

/**
 * Performs right-to-left function composition.<br/>
 * Use Array.prototype.reduce() to perform right-to-left function composition.<br/>
 * The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.<br/>
 * {@link https://30secondsofcode.org/function#compose original source code}
 * @param   {...[function]} fns) - list of unary function
 * @returns {*} result of the computation
 */
function compose$1(...fns) {
  return fns.reduce((f, g) => (...args) => f(g(...args)))
}

/* Riot v9.1.2, @license MIT */

/**
 * Helper method to create component without relying on the registered ones
 * @param   {Object} implementation - component implementation
 * @returns {Function} function that will allow you to mount a riot component on a DOM node
 */
function component(implementation) {
  return (el, props, { slots, attributes, parentScope } = {}) =>
    compose$1(
      (c) => c.mount(el, parentScope),
      (c) => c({ props, slots, attributes }),
      createComponentFromWrapper,
    )(implementation)
}

/* Riot v9.1.2, @license MIT */

/**
 * Lift a riot component Interface into a pure riot object
 * @param   {Function} func - RiotPureComponent factory function
 * @returns {Function} the lifted original function received as argument
 */
function pure(func) {
  if (!isFunction(func))
    panic$4('riot.pure accepts only arguments of type "function"');
  func[IS_PURE_SYMBOL] = true;
  return func
}

/* Riot v9.1.2, @license MIT */
/**
 * no-op function needed to add the proper types to your component via typescript
 * @param {Function|Object} component - component default export
 * @returns {Function|Object} returns exactly what it has received
 */
/* istanbul ignore next */
const withTypes = (component) => component;

/* Riot v9.1.2, @license MIT */

// expose some internal stuff that might be used from external tools
const __ = {
  cssManager,
  DOMBindings: {
    template: create,
    createBinding: create$1,
    createExpression: create$4,
    bindingTypes,
    expressionTypes,
  },
  globals: {
    DOM_COMPONENT_INSTANCE_PROPERTY,
    PARENT_KEY_SYMBOL,
  },
};

function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
        fromEl[name] = toEl[name];
        if (fromEl[name]) {
            fromEl.setAttribute(name, '');
        } else {
            fromEl.removeAttribute(name);
        }
    }
}

var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
        var parentNode = fromEl.parentNode;
        if (parentNode) {
            var parentName = parentNode.nodeName.toUpperCase();
            if (parentName === 'OPTGROUP') {
                parentNode = parentNode.parentNode;
                parentName = parentNode && parentNode.nodeName.toUpperCase();
            }
            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {
                if (fromEl.hasAttribute('selected') && !toEl.selected) {
                    // Workaround for MS Edge bug where the 'selected' attribute can only be
                    // removed if set to a non-empty value:
                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/
                    fromEl.setAttribute('selected', 'selected');
                    fromEl.removeAttribute('selected');
                }
                // We have to reset select element's selectedIndex to -1, otherwise setting
                // fromEl.selected using the syncBooleanAttrProp below has no effect.
                // The correct selectedIndex will be set in the SELECT special handler below.
                parentNode.selectedIndex = -1;
            }
        }
        syncBooleanAttrProp(fromEl, toEl, 'selected');
    },
    /**
     * The "value" attribute is special for the <input> element since it sets
     * the initial value. Changing the "value" attribute without changing the
     * "value" property will have no effect since it is only used to the set the
     * initial value.  Similar for the "checked" attribute, and "disabled".
     */
    INPUT: function(fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'checked');
        syncBooleanAttrProp(fromEl, toEl, 'disabled');

        if (fromEl.value !== toEl.value) {
            fromEl.value = toEl.value;
        }

        if (!toEl.hasAttribute('value')) {
            fromEl.removeAttribute('value');
        }
    },

    TEXTAREA: function(fromEl, toEl) {
        var newValue = toEl.value;
        if (fromEl.value !== newValue) {
            fromEl.value = newValue;
        }

        var firstChild = fromEl.firstChild;
        if (firstChild) {
            // Needed for IE. Apparently IE sets the placeholder as the
            // node value and vise versa. This ignores an empty update.
            var oldValue = firstChild.nodeValue;

            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {
                return;
            }

            firstChild.nodeValue = newValue;
        }
    },
    SELECT: function(fromEl, toEl) {
        if (!toEl.hasAttribute('multiple')) {
            var selectedIndex = -1;
            var i = 0;
            // We have to loop through children of fromEl, not toEl since nodes can be moved
            // from toEl to fromEl directly when morphing.
            // At the time this special handler is invoked, all children have already been morphed
            // and appended to / removed from fromEl, so using fromEl here is safe and correct.
            var curChild = fromEl.firstChild;
            var optgroup;
            var nodeName;
            while(curChild) {
                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
                if (nodeName === 'OPTGROUP') {
                    optgroup = curChild;
                    curChild = optgroup.firstChild;
                } else {
                    if (nodeName === 'OPTION') {
                        if (curChild.hasAttribute('selected')) {
                            selectedIndex = i;
                            break;
                        }
                        i++;
                    }
                    curChild = curChild.nextSibling;
                    if (!curChild && optgroup) {
                        curChild = optgroup.nextSibling;
                        optgroup = null;
                    }
                }
            }

            fromEl.selectedIndex = selectedIndex;
        }
    }
};

/**
 * Create a DOM tree walker
 * @param   {HTMLElement} node - root node where we will start the crawling
 * @returns {TreeWalker} the TreeWalker object
 */
function createWalker(node) {
  return document.createTreeWalker(
    node,
    NodeFilter.SHOW_ELEMENT,
    { acceptNode: () => NodeFilter.FILTER_ACCEPT },
    false,
  )
}

/**
 * Sync a source node with the one rendered in runtime
 * @param   {HTMLElement} sourceNode - node pre-rendered in the DOM
 * @param   {HTMLElement} targetNode - node generated in runtime
 * @returns {undefined} void function
 */
function sync(sourceNode, targetNode) {
  const { activeElement } = document;
  const specialHandler = specialElHandlers[sourceNode.tagName];

  if (sourceNode === activeElement) {
    window.requestAnimationFrame(() => {
      targetNode.focus();
    });
  }

  if (specialHandler) {
    specialHandler(targetNode, sourceNode);
  }
}

/**
 * Morph the existing DOM node with the new created one
 * @param   {HTMLElement} sourceElement - the root node already pre-rendered in the DOM
 * @param   {HTMLElement} targetElement - the root node of the Riot.js component mounted in runtime
 * @returns {undefined} void function
 */
function morph(sourceElement, targetElement) {
  const sourceWalker = createWalker(sourceElement);
  const targetWalker = createWalker(targetElement);
  // recursive function to walk source element tree
  const walk = (fn) =>
    sourceWalker.nextNode() && targetWalker.nextNode() && fn() && walk(fn);

  walk(() => {
    const { currentNode } = sourceWalker;
    const targetNode = targetWalker.currentNode;

    if (currentNode.tagName === targetNode.tagName) {
      sync(currentNode, targetNode);
    }

    return true
  });
}

/**
 * Create a custom Riot.js mounting function to hydrate an existing SSR DOM node
 * @param   {RiotComponentShell} componentAPI - component shell
 * @returns {Function} function similar to the riot.component
 */
function hydrate(componentAPI) {
  const mountComponent = component(componentAPI);

  return (element, props) => {
    const clone = element.cloneNode(false);
    const instance = mountComponent(clone, props);

    if (instance.onBeforeHydrate)
      instance.onBeforeHydrate(instance.props, instance.state);

    // morph the nodes
    morph(element, clone);

    // swap the html
    element.parentNode.replaceChild(clone, element);

    if (instance.onHydrated) instance.onHydrated(instance.props, instance.state);

    return instance
  }
}

/**
 * Cancel token
 * @private
 * @type { Symbol }
 */
const CANCEL$1 = Symbol();

/**
 * Helper that can be returned by ruit function to cancel the tasks chain
 * @returns { Symbol } internal private constant
 * @example
 *
 * ruit(
 *   100,
 *   num => Math.random() * num
 *   num => num > 50 ? ruit.cancel() : num
 *   num => num - 2
 * ).then(result => {
 *   console.log(result) // here we will get only number lower than 50
 * })
 *
 */
ruit$1.cancel = () => CANCEL$1;

/**
 * The same as ruit() but with the arguments inverted from right to left
 * @param   { * } tasks - list of tasks to process sequentially
 * @returns { Promise } a promise containing the result of the whole chain
 * @example
 *
 * const curry = f => a => b => f(a, b)
 * const add = (a, b) => a + b
 *
 * const addOne = curry(add)(1)
 *
 * const squareAsync = (num) => {
 *   return new Promise(r => {
 *     setTimeout(r, 500, num * 2)
 *   })
 * }
 *
 * // a -> a + a -> a * 2
 * // basically from right to left: 1 => 1 + 1 => 2 * 2
 * ruit.compose(squareAsync, addOne, 1).then(result => console.log(result)) // 4
 */
ruit$1.compose = (...tasks) => ruit$1(...tasks.reverse());

/**
 * Serialize a list of sync and async tasks from left to right
 * @param   { * } tasks - list of tasks to process sequentially
 * @returns { Promise } a promise containing the result of the whole chain
 * @example
 *
 * const curry = f => a => b => f(a, b)
 * const add = (a, b) => a + b
 *
 * const addOne = curry(add)(1)
 *
 * const squareAsync = (num) => {
 *   return new Promise(r => {
 *     setTimeout(r, 500, num * 2)
 *   })
 * }
 *
 * // a -> a + a -> a * 2
 * // basically from left to right: 1 => 1 + 1 => 2 * 2
 * ruit(1, addOne, squareAsync).then(result => console.log(result)) // 4
 */
function ruit$1(...tasks) {
  return new Promise((resolve, reject) => {
    return (function run(queue, result) {
      if (!queue.length) return resolve(result)

      const [task, ...rest] = queue;
      const value = typeof task === 'function' ? task(result) : task;
      const done = v => run(rest, v);

      // check against nil values
      if (value != null) {
        if (value === CANCEL$1) return
        if (value.then) return value.then(done, reject)
      }

      return Promise.resolve(done(value))
    })(tasks)
  })
}

// Store the erre the API methods to handle the plugins installation
const API_METHODS$1 = new Set();
const UNSUBSCRIBE_SYMBOL$1 = Symbol();
const UNSUBSCRIBE_METHOD$1 = 'off';
const CANCEL_METHOD$1 = 'cancel';

/**
 * Factory function to create the stream generator
 * @private
 * @param {Set} modifiers - stream input modifiers
 * @returns {Generator} the stream generator
 */
function createStream$1(modifiers) {
  const stream = (function *stream() {
    while (true) {
      // get the initial stream value
      const input = yield;

      // run the input sequence
      yield ruit$1(input, ...modifiers);
    }
  })();

  // start the stream
  stream.next();

  return stream
}

/**
 * Dispatch a value to several listeners
 * @private
 * @param   {Set} callbacks - callbacks collection
 * @param   {*} value - anything
 * @returns {Set} the callbacks received
 */
function dispatch$1(callbacks, value) {
  callbacks.forEach(f => {
    // unsubscribe the callback if erre.unsubscribe() will be returned
    if (f(value) === UNSUBSCRIBE_SYMBOL$1) callbacks.delete(f);
  });

  return callbacks
}

/**
 * Throw a panic error
 * @param {string} message - error message
 * @returns {Error} an error object
 */
function panic$3(message) {
  throw new Error(message)
}

/**
 * Install an erre plugin adding it to the API
 * @param   {string} name - plugin name
 * @param   {Function} fn - new erre API method
 * @returns {Function} return the erre function
 */
erre$1.install = function(name, fn) {
  if (!name || typeof name !== 'string')
    panic$3('Please provide a name (as string) for your erre plugin');
  if (!fn || typeof fn !== 'function')
    panic$3('Please provide a function for your erre plugin');

  if (API_METHODS$1.has(name)) {
    panic$3(`The ${name} is already part of the erre API, please provide a different name`);
  } else {
    erre$1[name] = fn;
    API_METHODS$1.add(name);
  }

  return erre$1
};

// alias for ruit canel to stop a stream chain
erre$1.install(CANCEL_METHOD$1, ruit$1.cancel);

// unsubscribe helper
erre$1.install(UNSUBSCRIBE_METHOD$1, () => UNSUBSCRIBE_SYMBOL$1);

/**
 * Stream constuction function
 * @param   {...Function} fns - stream modifiers
 * @returns {Object} erre instance
 */
function erre$1(...fns) {
  const
    [success, error, end, modifiers] = [new Set(), new Set(), new Set(), new Set(fns)],
    generator = createStream$1(modifiers),
    stream = Object.create(generator),
    addToCollection = (collection) => (fn) => collection.add(fn) && stream,
    deleteFromCollection = (collection) => (fn) => collection.delete(fn) ? stream
      : panic$3('Couldn\'t remove handler passed by reference');

  return Object.assign(stream, {
    on: Object.freeze({
      value: addToCollection(success),
      error: addToCollection(error),
      end: addToCollection(end)
    }),
    off: Object.freeze({
      value: deleteFromCollection(success),
      error: deleteFromCollection(error),
      end: deleteFromCollection(end)
    }),
    connect: addToCollection(modifiers),
    push(input) {
      const { value, done } = stream.next(input);

      // dispatch the stream events
      if (!done) {
        value.then(
          res => dispatch$1(success, res),
          err => dispatch$1(error, err)
        );
      }

      return stream
    },
    end() {
      // kill the stream
      generator.return();
      // dispatch the end event
      dispatch$1(end)
      // clean up all the collections
      ;[success, error, end, modifiers].forEach(el => el.clear());

      return stream
    },
    fork() {
      return erre$1(...modifiers)
    },
    next(input) {
      // get the input and run eventually the promise
      const result = generator.next(input);

      // pause to the next iteration
      generator.next();

      return result
    }
  })
}

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

/**
 * groupBy() groups an array by the given key. A transformation may be passed to be applied when each value is concatenated
 * to the grouped component.
 * @param {string} key - The key to use to group the array
 * @param {array} array - The array to group
 * @param {function} transform - A transformation to apply to the grouped value
 */
var groupBy$1 = function groupBy (key, array, transform) { 
  return array.reduce((objectsByKeyValue, obj) => {
    const value = obj[key];
    let val = obj;
    if (typeof transform === 'function') {
        val = transform(val);
    }
    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(val);
    return objectsByKeyValue;
  }, {})
};

/**
 * supplant() does variable substitution on the string. It scans through the string looking for
 * expressions enclosed in { } braces. If an expression is found, use it as a key on the object,
 * and if the key has a string value or number value, it is substituted for the bracket expression
 * and it repeats.
 * @param {string} stringVal - The string that needs supplanting
 * @param {object} replacements - key/value object with the keys to be replaced by the corresponding values
 */
var supplant$1 = function (stringVal, replacements) {
  return stringVal.replace(/{([^{}]*)}/g, function (a, b) {
    let r = replacements[b];
    return typeof r === 'string' || typeof r === 'number' ? r : a
  })
};

var countriesData$1 = [
  {
    "countryNameEn": "Andorra",
    "countryNameLocal": "Andorra",
    "countryCode": "AD",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ca",
    "officialLanguageNameEn": "Catalan, Valencian",
    "officialLanguageNameLocal": "Català, Valencià",
    "countryCallingCode": "376",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇦🇩"
  },
  {
    "countryNameEn": "Afghanistan",
    "countryNameLocal": "د افغانستان اسلامي دولتدولت اسلامی افغانستان, جمهوری اسلامی افغانستان",
    "countryCode": "AF",
    "currencyCode": "AFN",
    "currencyNameEn": "Afghan afghani",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fa",
    "officialLanguageNameEn": "Persian",
    "officialLanguageNameLocal": "فارسی",
    "countryCallingCode": "93",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇦🇫"
  },
  {
    "countryNameEn": "Antigua and Barbuda",
    "countryNameLocal": "Antigua and Barbuda",
    "countryCode": "AG",
    "currencyCode": "XCD",
    "currencyNameEn": "East Caribbean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1268",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇦🇬"
  },
  {
    "countryNameEn": "Anguilla",
    "countryNameLocal": "Anguilla",
    "countryCode": "AI",
    "currencyCode": "XCD",
    "currencyNameEn": "East Caribbean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1264",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇦🇮"
  },
  {
    "countryNameEn": "Albania",
    "countryNameLocal": "Shqipëria",
    "countryCode": "AL",
    "currencyCode": "ALL",
    "currencyNameEn": "Albanian lek",
    "tinType": "NIPT",
    "tinName": "Numri i Identifikimit për Personin e Tatueshëm",
    "officialLanguageCode": "sq",
    "officialLanguageNameEn": "Albanian",
    "officialLanguageNameLocal": "Shqip",
    "countryCallingCode": "355",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇦🇱"
  },
  {
    "countryNameEn": "Armenia",
    "countryNameLocal": "Հայաստան",
    "countryCode": "AM",
    "currencyCode": "AMD",
    "currencyNameEn": "Armenian dram",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "hy",
    "officialLanguageNameEn": "Armenian",
    "officialLanguageNameLocal": "Հայերեն",
    "countryCallingCode": "374",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇦🇲"
  },
  {
    "countryNameEn": "Angola",
    "countryNameLocal": "Angola",
    "countryCode": "AO",
    "currencyCode": "AOA",
    "currencyNameEn": "Angolan kwanza",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "pt",
    "officialLanguageNameEn": "Portuguese",
    "officialLanguageNameLocal": "Português",
    "countryCallingCode": "244",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇦🇴"
  },
  {
    "countryNameEn": "Antarctica",
    "countryNameLocal": "Antarctica, Antártico, Antarctique, Антарктике",
    "countryCode": "AQ",
    "currencyCode": "",
    "currencyNameEn": "",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "672",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇦🇶"
  },
  {
    "countryNameEn": "Argentina",
    "countryNameLocal": "Argentina",
    "countryCode": "AR",
    "currencyCode": "ARS",
    "currencyNameEn": "Argentine peso",
    "tinType": "CUIT",
    "tinName": "Código Único de Identificación Tributaria",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "54",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇦🇷"
  },
  {
    "countryNameEn": "American Samoa",
    "countryNameLocal": "American Samoa",
    "countryCode": "AS",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1684",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇦🇸"
  },
  {
    "countryNameEn": "Austria",
    "countryNameLocal": "Österreich",
    "countryCode": "AT",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "UID",
    "tinName": "Umsatzsteuer-Identifikationsnummer",
    "officialLanguageCode": "de",
    "officialLanguageNameEn": "German",
    "officialLanguageNameLocal": "Deutsch",
    "countryCallingCode": "43",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇦🇹"
  },
  {
    "countryNameEn": "Australia",
    "countryNameLocal": "Australia",
    "countryCode": "AU",
    "currencyCode": "AUD",
    "currencyNameEn": "Australian dollar",
    "tinType": "ABN",
    "tinName": "Australian Business Number",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "61",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇦🇺"
  },
  {
    "countryNameEn": "Aruba",
    "countryNameLocal": "Aruba",
    "countryCode": "AW",
    "currencyCode": "AWG",
    "currencyNameEn": "Aruban florin",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "nl",
    "officialLanguageNameEn": "Dutch, Flemish",
    "officialLanguageNameLocal": "Nederlands, Vlaams",
    "countryCallingCode": "297",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇦🇼"
  },
  {
    "countryNameEn": "Åland Islands",
    "countryNameLocal": "Åland",
    "countryCode": "AX",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "sv",
    "officialLanguageNameEn": "Swedish",
    "officialLanguageNameLocal": "Svenska",
    "countryCallingCode": "358",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇦🇽"
  },
  {
    "countryNameEn": "Azerbaijan",
    "countryNameLocal": "Azərbaycan",
    "countryCode": "AZ",
    "currencyCode": "AZN",
    "currencyNameEn": "Azerbaijani manat",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "az",
    "officialLanguageNameEn": "Azerbaijani",
    "officialLanguageNameLocal": "azərbaycan dili",
    "countryCallingCode": "994",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇦🇿"
  },
  {
    "countryNameEn": "Bosnia and Herzegovina",
    "countryNameLocal": "Bosna i Hercegovina",
    "countryCode": "BA",
    "currencyCode": "BAM",
    "currencyNameEn": "Bosnia and Herzegovina convertible mark",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "bs",
    "officialLanguageNameEn": "Bosnian",
    "officialLanguageNameLocal": "bosanski jezik",
    "countryCallingCode": "387",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇧🇦"
  },
  {
    "countryNameEn": "Barbados",
    "countryNameLocal": "Barbados",
    "countryCode": "BB",
    "currencyCode": "BBD",
    "currencyNameEn": "Barbados dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1246",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇧🇧"
  },
  {
    "countryNameEn": "Bangladesh",
    "countryNameLocal": "গণপ্রজাতন্ত্রী বাংলাদেশ",
    "countryCode": "BD",
    "currencyCode": "BDT",
    "currencyNameEn": "Bangladeshi taka",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "bn",
    "officialLanguageNameEn": "Bengali",
    "officialLanguageNameLocal": "বাংলা",
    "countryCallingCode": "880",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇧🇩"
  },
  {
    "countryNameEn": "Belgium",
    "countryNameLocal": "België, Belgique, Belgien",
    "countryCode": "BE",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "n° TVABTW-nr Mwst-nr",
    "tinName": "BTW identificatienummer / Numéro de TVA",
    "officialLanguageCode": "nl",
    "officialLanguageNameEn": "Dutch, Flemish",
    "officialLanguageNameLocal": "Nederlands, Vlaams",
    "countryCallingCode": "32",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇧🇪"
  },
  {
    "countryNameEn": "Burkina Faso",
    "countryNameLocal": "Burkina Faso",
    "countryCode": "BF",
    "currencyCode": "XOF",
    "currencyNameEn": "CFA franc BCEAO",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "226",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇧🇫"
  },
  {
    "countryNameEn": "Bulgaria",
    "countryNameLocal": "България",
    "countryCode": "BG",
    "currencyCode": "BGN",
    "currencyNameEn": "Bulgarian lev",
    "tinType": "ДДС номер",
    "tinName": "Идентификационен номер по ДДС",
    "officialLanguageCode": "bg",
    "officialLanguageNameEn": "Bulgarian",
    "officialLanguageNameLocal": "български език",
    "countryCallingCode": "359",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇧🇬"
  },
  {
    "countryNameEn": "Bahrain",
    "countryNameLocal": "البحرين",
    "countryCode": "BH",
    "currencyCode": "BHD",
    "currencyNameEn": "Bahraini dinar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "973",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇧🇭"
  },
  {
    "countryNameEn": "Burundi",
    "countryNameLocal": "Burundi",
    "countryCode": "BI",
    "currencyCode": "BIF",
    "currencyNameEn": "Burundian franc",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "257",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇧🇮"
  },
  {
    "countryNameEn": "Benin",
    "countryNameLocal": "Bénin",
    "countryCode": "BJ",
    "currencyCode": "XOF",
    "currencyNameEn": "CFA franc BCEAO",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "229",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇧🇯"
  },
  {
    "countryNameEn": "Saint Barthélemy",
    "countryNameLocal": "Saint-Barthélemy",
    "countryCode": "BL",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "590",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇧🇱"
  },
  {
    "countryNameEn": "Bermuda",
    "countryNameLocal": "Bermuda",
    "countryCode": "BM",
    "currencyCode": "BMD",
    "currencyNameEn": "Bermudian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1441",
    "areaCodes": [],
    "region": "North America",
    "flag": "🇧🇲"
  },
  {
    "countryNameEn": "Brunei Darussalam",
    "countryNameLocal": "Brunei Darussalam",
    "countryCode": "BN",
    "currencyCode": "BND",
    "currencyNameEn": "Brunei dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ms",
    "officialLanguageNameEn": "Malay",
    "officialLanguageNameLocal": "Bahasa Melayu, بهاس ملايو‎",
    "countryCallingCode": "673",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇧🇳"
  },
  {
    "countryNameEn": "Bolivia (Plurinational State of)",
    "countryNameLocal": "Bolivia, Bulibiya, Volívia, Wuliwya",
    "countryCode": "BO",
    "currencyCode": "BOP",
    "currencyNameEn": "",
    "tinType": "NIT",
    "tinName": "Número de Identificación Tributaria",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "591",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇧🇴"
  },
  {
    "countryNameEn": "Bonaire, Sint Eustatius and Saba",
    "countryNameLocal": "Caribisch Nederland",
    "countryCode": "BQ",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "nl",
    "officialLanguageNameEn": "Dutch, Flemish",
    "officialLanguageNameLocal": "Nederlands, Vlaams",
    "countryCallingCode": "5997",
    "areaCodes": [],
    "region": "Unknown",
    "flag": "🇧🇶"
  },
  {
    "countryNameEn": "Brazil",
    "countryNameLocal": "Brasil",
    "countryCode": "BR",
    "currencyCode": "BRL",
    "currencyNameEn": "Brazilian real",
    "tinType": "CNPJ",
    "tinName": "Cadastro Nacional de Pessoa Jurídica",
    "officialLanguageCode": "pt",
    "officialLanguageNameEn": "Portuguese",
    "officialLanguageNameLocal": "Português",
    "countryCallingCode": "55",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇧🇷"
  },
  {
    "countryNameEn": "Bhutan",
    "countryNameLocal": "འབྲུག་ཡུལ",
    "countryCode": "BT",
    "currencyCode": "BTN",
    "currencyNameEn": "Bhutanese ngultrum",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "dz",
    "officialLanguageNameEn": "Dzongkha",
    "officialLanguageNameLocal": "རྫོང་ཁ",
    "countryCallingCode": "975",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇧🇹"
  },
  {
    "countryNameEn": "Bouvet Island",
    "countryNameLocal": "Bouvetøya",
    "countryCode": "BV",
    "currencyCode": "NOK",
    "currencyNameEn": "Norwegian krone",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "no",
    "officialLanguageNameEn": "Norwegian",
    "officialLanguageNameLocal": "Norsk",
    "countryCallingCode": "47",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇧🇻"
  },
  {
    "countryNameEn": "Botswana",
    "countryNameLocal": "Botswana",
    "countryCode": "BW",
    "currencyCode": "BWP",
    "currencyNameEn": "Botswana pula",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "267",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇧🇼"
  },
  {
    "countryNameEn": "Belarus",
    "countryNameLocal": "Беларусь",
    "countryCode": "BY",
    "currencyCode": "BYR",
    "currencyNameEn": "",
    "tinType": "УНП (UNP)",
    "tinName": "Учетный номер плательщика",
    "officialLanguageCode": "be",
    "officialLanguageNameEn": "Belarusian",
    "officialLanguageNameLocal": "беларуская мова",
    "countryCallingCode": "375",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇧🇾"
  },
  {
    "countryNameEn": "Belize",
    "countryNameLocal": "Belize",
    "countryCode": "BZ",
    "currencyCode": "BZD",
    "currencyNameEn": "Belize dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "501",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇧🇿"
  },
  {
    "countryNameEn": "Canada",
    "countryNameLocal": "Canada",
    "countryCode": "CA",
    "currencyCode": "CAD",
    "currencyNameEn": "Canadian dollar",
    "tinType": "BN / NE",
    "tinName": "Business Number",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1",
    "areaCodes": ["403", "587", "780", "825", "236", "250", "604", "672", "778", "204", "431", "506", "709", "782", "902", "226", "249", "289", "343", "365", "416", "437", "519", "548", "613", "647", "705", "807", "905", "367", "418", "438", "450", "514", "579", "581", "819", "873", "306", "639", "867"],
    "region": "North America",
    "flag": "🇨🇦"
  },
  {
    "countryNameEn": "Switzerland",
    "countryNameLocal": "Schweiz, Suisse, Svizzera, Svizra",
    "countryCode": "CH",
    "currencyCode": "CHE",
    "currencyNameEn": "WIR Euro (complementary currency)",
    "tinType": "MWST/TVA/IVA",
    "tinName": "Mehrwertsteuernummer",
    "officialLanguageCode": "de",
    "officialLanguageNameEn": "German",
    "officialLanguageNameLocal": "Deutsch",
    "countryCallingCode": "41",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇨🇭"
  },
  {
    "countryNameEn": "Côte d'Ivoire",
    "countryNameLocal": "Côte d'Ivoire",
    "countryCode": "CI",
    "currencyCode": "XOF",
    "currencyNameEn": "CFA franc BCEAO",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "225",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇨🇮"
  },
  {
    "countryNameEn": "Chile",
    "countryNameLocal": "Chile",
    "countryCode": "CL",
    "currencyCode": "CLP",
    "currencyNameEn": "Chilean peso",
    "tinType": "RUT",
    "tinName": "Rol Único Tributario",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "56",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇨🇱"
  },
  {
    "countryNameEn": "Cameroon",
    "countryNameLocal": "Cameroun, Cameroon",
    "countryCode": "CM",
    "currencyCode": "XAF",
    "currencyNameEn": "CFA franc BEAC",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "237",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇨🇲"
  },
  {
    "countryNameEn": "China",
    "countryNameLocal": "中国",
    "countryCode": "CN",
    "currencyCode": "CNY",
    "currencyNameEn": "Renminbi (Chinese) yuan",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "zh-hans",
    "officialLanguageNameEn": "",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "86",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇨🇳"
  },
  {
    "countryNameEn": "Colombia",
    "countryNameLocal": "Colombia",
    "countryCode": "CO",
    "currencyCode": "COP",
    "currencyNameEn": "Colombian peso",
    "tinType": "NIT",
    "tinName": "Número De Identificación Tributaria",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "57",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇨🇴"
  },
  {
    "countryNameEn": "Costa Rica",
    "countryNameLocal": "Costa Rica",
    "countryCode": "CR",
    "currencyCode": "CRC",
    "currencyNameEn": "Costa Rican colon",
    "tinType": "",
    "tinName": "Cédula Jurídica",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "506",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇨🇷"
  },
  {
    "countryNameEn": "Cuba",
    "countryNameLocal": "Cuba",
    "countryCode": "CU",
    "currencyCode": "CUC",
    "currencyNameEn": "Cuban convertible peso",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "53",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇨🇺"
  },
  {
    "countryNameEn": "Cabo Verde",
    "countryNameLocal": "Cabo Verde",
    "countryCode": "CV",
    "currencyCode": "CVE",
    "currencyNameEn": "Cape Verdean escudo",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "pt",
    "officialLanguageNameEn": "Portuguese",
    "officialLanguageNameLocal": "Português",
    "countryCallingCode": "238",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇨🇻"
  },
  {
    "countryNameEn": "Curaçao",
    "countryNameLocal": "Curaçao",
    "countryCode": "CW",
    "currencyCode": "ANG",
    "currencyNameEn": "Netherlands Antillean guilder",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "nl",
    "officialLanguageNameEn": "Dutch, Flemish",
    "officialLanguageNameLocal": "Nederlands, Vlaams",
    "countryCallingCode": "599",
    "areaCodes": [],
    "region": "Unknown",
    "flag": "🇨🇼"
  },
  {
    "countryNameEn": "Christmas Island",
    "countryNameLocal": "Christmas Island",
    "countryCode": "CX",
    "currencyCode": "AUD",
    "currencyNameEn": "Australian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "61",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇨🇽"
  },
  {
    "countryNameEn": "Cyprus",
    "countryNameLocal": "Κύπρος, Kibris",
    "countryCode": "CY",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "ΦΠΑ",
    "tinName": "Αριθμός Εγγραφής Φ.Π.Α.",
    "officialLanguageCode": "el",
    "officialLanguageNameEn": "Greek, Modern (1453-)",
    "officialLanguageNameLocal": "ελληνικά",
    "countryCallingCode": "357",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇨🇾"
  },
  {
    "countryNameEn": "Germany",
    "countryNameLocal": "Deutschland",
    "countryCode": "DE",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "USt-IdNr.",
    "tinName": "Umsatzsteuer-Identifikationsnummer",
    "officialLanguageCode": "de",
    "officialLanguageNameEn": "German",
    "officialLanguageNameLocal": "Deutsch",
    "countryCallingCode": "49",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇩🇪"
  },
  {
    "countryNameEn": "Djibouti",
    "countryNameLocal": "Djibouti, جيبوتي, Jabuuti, Gabuutih",
    "countryCode": "DJ",
    "currencyCode": "DJF",
    "currencyNameEn": "Djiboutian franc",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "253",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇩🇯"
  },
  {
    "countryNameEn": "Denmark",
    "countryNameLocal": "Danmark",
    "countryCode": "DK",
    "currencyCode": "DKK",
    "currencyNameEn": "Danish krone",
    "tinType": "CVR",
    "tinName": "Momsregistreringsnummer",
    "officialLanguageCode": "da",
    "officialLanguageNameEn": "Danish",
    "officialLanguageNameLocal": "dansk",
    "countryCallingCode": "45",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇩🇰"
  },
  {
    "countryNameEn": "Dominica",
    "countryNameLocal": "Dominica",
    "countryCode": "DM",
    "currencyCode": "XCD",
    "currencyNameEn": "East Caribbean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "767",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇩🇲"
  },
  {
    "countryNameEn": "Algeria",
    "countryNameLocal": "الجزائر",
    "countryCode": "DZ",
    "currencyCode": "DZD",
    "currencyNameEn": "Algerian dinar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "213",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇩🇿"
  },
  {
    "countryNameEn": "Ecuador",
    "countryNameLocal": "Ecuador",
    "countryCode": "EC",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "RUC",
    "tinName": "Número de Registro Unico de Contribuyentes",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "593",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇪🇨"
  },
  {
    "countryNameEn": "Estonia",
    "countryNameLocal": "Eesti",
    "countryCode": "EE",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "KMKR",
    "tinName": "Käibemaksukohustuslase number",
    "officialLanguageCode": "et",
    "officialLanguageNameEn": "Estonian",
    "officialLanguageNameLocal": "eesti, eesti keel",
    "countryCallingCode": "372",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇪🇪"
  },
  {
    "countryNameEn": "Egypt",
    "countryNameLocal": "مصر",
    "countryCode": "EG",
    "currencyCode": "EGP",
    "currencyNameEn": "Egyptian pound",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "20",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇪🇬"
  },
  {
    "countryNameEn": "Western Sahara",
    "countryNameLocal": "Sahara Occidental",
    "countryCode": "EH",
    "currencyCode": "MAD",
    "currencyNameEn": "Moroccan dirham",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "212",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇪🇭"
  },
  {
    "countryNameEn": "Eritrea",
    "countryNameLocal": "ኤርትራ, إرتريا, Eritrea",
    "countryCode": "ER",
    "currencyCode": "ERN",
    "currencyNameEn": "Eritrean nakfa",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ti",
    "officialLanguageNameEn": "Tigrinya",
    "officialLanguageNameLocal": "ትግርኛ",
    "countryCallingCode": "291",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇪🇷"
  },
  {
    "countryNameEn": "Spain",
    "countryNameLocal": "España",
    "countryCode": "ES",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "NIF (CIF)",
    "tinName": "Número de Identificación Fiscal (formerly named Código de Identificación Fiscal)",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "34",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇪🇸"
  },
  {
    "countryNameEn": "Ethiopia",
    "countryNameLocal": "ኢትዮጵያ, Itoophiyaa",
    "countryCode": "ET",
    "currencyCode": "ETB",
    "currencyNameEn": "Ethiopian birr",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "am",
    "officialLanguageNameEn": "Amharic",
    "officialLanguageNameLocal": "አማርኛ",
    "countryCallingCode": "251",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇪🇹"
  },
  {
    "countryNameEn": "Finland",
    "countryNameLocal": "Suomi",
    "countryCode": "FI",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "ALV nro",
    "tinName": "Arvonlisäveronumero",
    "officialLanguageCode": "fi",
    "officialLanguageNameEn": "Finnish",
    "officialLanguageNameLocal": "suomi, suomen kieli",
    "countryCallingCode": "358",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇫🇮"
  },
  {
    "countryNameEn": "Fiji",
    "countryNameLocal": "Fiji",
    "countryCode": "FJ",
    "currencyCode": "FJD",
    "currencyNameEn": "Fiji dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "679",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇫🇯"
  },
  {
    "countryNameEn": "Micronesia (Federated States of)",
    "countryNameLocal": "Micronesia",
    "countryCode": "FM",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "691",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇫🇲"
  },
  {
    "countryNameEn": "France",
    "countryNameLocal": "France",
    "countryCode": "FR",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "n° TVA",
    "tinName": "Numéro d'identification à la taxe sur la valeur ajoutée / Numéro de TVA intracommunautaire",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "33",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇫🇷"
  },
  {
    "countryNameEn": "Gabon",
    "countryNameLocal": "Gabon",
    "countryCode": "GA",
    "currencyCode": "XAF",
    "currencyNameEn": "CFA franc BEAC",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "241",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇬🇦"
  },
  {
    "countryNameEn": "Grenada",
    "countryNameLocal": "Grenada",
    "countryCode": "GD",
    "currencyCode": "XCD",
    "currencyNameEn": "East Caribbean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1473",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇬🇩"
  },
  {
    "countryNameEn": "Georgia",
    "countryNameLocal": "საქართველო",
    "countryCode": "GE",
    "currencyCode": "GEL",
    "currencyNameEn": "Georgian lari",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ka",
    "officialLanguageNameEn": "Georgian",
    "officialLanguageNameLocal": "ქართული",
    "countryCallingCode": "995",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇬🇪"
  },
  {
    "countryNameEn": "French Guiana",
    "countryNameLocal": "Guyane française",
    "countryCode": "GF",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "594",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇬🇫"
  },
  {
    "countryNameEn": "Guernsey",
    "countryNameLocal": "Guernsey",
    "countryCode": "GG",
    "currencyCode": "GBP",
    "currencyNameEn": "Pound sterling",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "44",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇬🇬"
  },
  {
    "countryNameEn": "Ghana",
    "countryNameLocal": "Ghana",
    "countryCode": "GH",
    "currencyCode": "GHS",
    "currencyNameEn": "Ghanaian cedi",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "233",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇬🇭"
  },
  {
    "countryNameEn": "Gibraltar",
    "countryNameLocal": "Gibraltar",
    "countryCode": "GI",
    "currencyCode": "GIP",
    "currencyNameEn": "Gibraltar pound",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "350",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇬🇮"
  },
  {
    "countryNameEn": "Greenland",
    "countryNameLocal": "Kalaallit Nunaat, Grønland",
    "countryCode": "GL",
    "currencyCode": "DKK",
    "currencyNameEn": "Danish krone",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "kl",
    "officialLanguageNameEn": "Kalaallisut, Greenlandic",
    "officialLanguageNameLocal": "kalaallisut, kalaallit oqaasii",
    "countryCallingCode": "299",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇬🇱"
  },
  {
    "countryNameEn": "Guinea",
    "countryNameLocal": "Guinée",
    "countryCode": "GN",
    "currencyCode": "GNF",
    "currencyNameEn": "Guinean franc",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "224",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇬🇳"
  },
  {
    "countryNameEn": "Guadeloupe",
    "countryNameLocal": "Guadeloupe",
    "countryCode": "GP",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "590",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇬🇵"
  },
  {
    "countryNameEn": "Equatorial Guinea",
    "countryNameLocal": "Guiena ecuatorial, Guinée équatoriale, Guiné Equatorial",
    "countryCode": "GQ",
    "currencyCode": "XAF",
    "currencyNameEn": "CFA franc BEAC",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "240",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇬🇶"
  },
  {
    "countryNameEn": "Greece",
    "countryNameLocal": "Ελλάδα",
    "countryCode": "GR",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "el",
    "officialLanguageNameEn": "Greek, Modern (1453-)",
    "officialLanguageNameLocal": "ελληνικά",
    "countryCallingCode": "30",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇬🇷"
  },
  {
    "countryNameEn": "South Georgia and the South Sandwich Islands",
    "countryNameLocal": "South Georgia and the South Sandwich Islands",
    "countryCode": "GS",
    "currencyCode": "",
    "currencyNameEn": "",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "500",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇬🇸"
  },
  {
    "countryNameEn": "Guatemala",
    "countryNameLocal": "Guatemala",
    "countryCode": "GT",
    "currencyCode": "GTQ",
    "currencyNameEn": "Guatemalan quetzal",
    "tinType": "NIT",
    "tinName": "Número de Identificación Tributaria",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "502",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇬🇹"
  },
  {
    "countryNameEn": "Guam",
    "countryNameLocal": "Guam, Guåhån",
    "countryCode": "GU",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇬🇺"
  },
  {
    "countryNameEn": "Guinea-Bissau",
    "countryNameLocal": "Guiné-Bissau",
    "countryCode": "GW",
    "currencyCode": "XOF",
    "currencyNameEn": "CFA franc BCEAO",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "pt",
    "officialLanguageNameEn": "Portuguese",
    "officialLanguageNameLocal": "Português",
    "countryCallingCode": "245",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇬🇼"
  },
  {
    "countryNameEn": "Guyana",
    "countryNameLocal": "Guyana",
    "countryCode": "GY",
    "currencyCode": "GYD",
    "currencyNameEn": "Guyanese dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "592",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇬🇾"
  },
  {
    "countryNameEn": "Hong Kong",
    "countryNameLocal": "香港, Hong Kong",
    "countryCode": "HK",
    "currencyCode": "HKD",
    "currencyNameEn": "Hong Kong dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "zh-hant",
    "officialLanguageNameEn": "",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "852",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇭🇰"
  },
  {
    "countryNameEn": "Honduras",
    "countryNameLocal": "Honduras",
    "countryCode": "HN",
    "currencyCode": "HNL",
    "currencyNameEn": "Honduran lempira",
    "tinType": "RTN",
    "tinName": "Registro Tributario Nacional",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "504",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇭🇳"
  },
  {
    "countryNameEn": "Croatia",
    "countryNameLocal": "Hrvatska",
    "countryCode": "HR",
    "currencyCode": "HRK",
    "currencyNameEn": "Croatian kuna",
    "tinType": "PDV-ID; OIB",
    "tinName": "PDV Id. Broj OIB",
    "officialLanguageCode": "hr",
    "officialLanguageNameEn": "Croatian",
    "officialLanguageNameLocal": "hrvatski jezik",
    "countryCallingCode": "385",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇭🇷"
  },
  {
    "countryNameEn": "Haiti",
    "countryNameLocal": "Haïti, Ayiti",
    "countryCode": "HT",
    "currencyCode": "HTG",
    "currencyNameEn": "Haitian gourde",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "509",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇭🇹"
  },
  {
    "countryNameEn": "Hungary",
    "countryNameLocal": "Magyarország",
    "countryCode": "HU",
    "currencyCode": "HUF",
    "currencyNameEn": "Hungarian forint",
    "tinType": "ANUM",
    "tinName": "Közösségi adószám",
    "officialLanguageCode": "hu",
    "officialLanguageNameEn": "Hungarian",
    "officialLanguageNameLocal": "magyar",
    "countryCallingCode": "36",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇭🇺"
  },
  {
    "countryNameEn": "Indonesia",
    "countryNameLocal": "Indonesia",
    "countryCode": "ID",
    "currencyCode": "IDR",
    "currencyNameEn": "Indonesian rupiah",
    "tinType": "NPWP",
    "tinName": "Nomor Pokok Wajib Pajak",
    "officialLanguageCode": "id",
    "officialLanguageNameEn": "Indonesian",
    "officialLanguageNameLocal": "Bahasa Indonesia",
    "countryCallingCode": "62",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇮🇩"
  },
  {
    "countryNameEn": "Ireland",
    "countryNameLocal": "Ireland, Éire",
    "countryCode": "IE",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "VAT or CBL",
    "tinName": "Value added tax identification no.",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "353",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇮🇪"
  },
  {
    "countryNameEn": "Israel",
    "countryNameLocal": "ישראל",
    "countryCode": "IL",
    "currencyCode": "ILS",
    "currencyNameEn": "Israeli new shekel",
    "tinType": "",
    "tinName": "מס' עוסק מורשה / ח\"פ",
    "officialLanguageCode": "he",
    "officialLanguageNameEn": "Hebrew",
    "officialLanguageNameLocal": "עברית",
    "countryCallingCode": "972",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇮🇱"
  },
  {
    "countryNameEn": "Isle of Man",
    "countryNameLocal": "Isle of Man",
    "countryCode": "IM",
    "currencyCode": "GBP",
    "currencyNameEn": "Pound sterling",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "44",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇮🇲"
  },
  {
    "countryNameEn": "India",
    "countryNameLocal": "भारत, India",
    "countryCode": "IN",
    "currencyCode": "INR",
    "currencyNameEn": "Indian rupee",
    "tinType": "VAT TIN / CST TIN",
    "tinName": "Value Added Tax - Taxpayer Identification Number / Central Sales Tax - Taxpayer Identification Number (In most states)Not applicable",
    "officialLanguageCode": "hi",
    "officialLanguageNameEn": "Hindi",
    "officialLanguageNameLocal": "हिन्दी, हिंदी",
    "countryCallingCode": "91",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇮🇳"
  },
  {
    "countryNameEn": "British Indian Ocean Territories",
    "countryNameLocal": "British Indian Ocean Territories",
    "countryCode": "IO",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "246",
    "areaCodes": [],
    "region": "Indian Ocean",
    "flag": "🇮🇴",
  },
  {
    "countryNameEn": "Iraq",
    "countryNameLocal": "العراق, Iraq",
    "countryCode": "IQ",
    "currencyCode": "IQD",
    "currencyNameEn": "Iraqi dinar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "964",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇮🇶"
  },
  {
    "countryNameEn": "Iran (Islamic Republic of)",
    "countryNameLocal": "ایران",
    "countryCode": "IR",
    "currencyCode": "IRR",
    "currencyNameEn": "Iranian rial",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fa",
    "officialLanguageNameEn": "Persian",
    "officialLanguageNameLocal": "فارسی",
    "countryCallingCode": "98",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇮🇷"
  },
  {
    "countryNameEn": "Iceland",
    "countryNameLocal": "Ísland",
    "countryCode": "IS",
    "currencyCode": "ISK",
    "currencyNameEn": "Icelandic króna",
    "tinType": "VSK / VASK",
    "tinName": "Virðisaukaskattsnúmer",
    "officialLanguageCode": "is",
    "officialLanguageNameEn": "Icelandic",
    "officialLanguageNameLocal": "Íslenska",
    "countryCallingCode": "354",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇮🇸"
  },
  {
    "countryNameEn": "Italy",
    "countryNameLocal": "Italia",
    "countryCode": "IT",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "P.IVA",
    "tinName": "Partita IVA(IVA = Imposta sul Valore Aggiunto)",
    "officialLanguageCode": "it",
    "officialLanguageNameEn": "Italian",
    "officialLanguageNameLocal": "Italiano",
    "countryCallingCode": "39",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇮🇹"
  },
  {
    "countryNameEn": "Jersey",
    "countryNameLocal": "Jersey",
    "countryCode": "JE",
    "currencyCode": "GBP",
    "currencyNameEn": "Pound sterling",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "44",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇯🇪"
  },
  {
    "countryNameEn": "Jamaica",
    "countryNameLocal": "Jamaica",
    "countryCode": "JM",
    "currencyCode": "JMD",
    "currencyNameEn": "Jamaican dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "876",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇯🇲"
  },
  {
    "countryNameEn": "Jordan",
    "countryNameLocal": "الأُرْدُن",
    "countryCode": "JO",
    "currencyCode": "JOD",
    "currencyNameEn": "Jordanian dinar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "962",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇯🇴"
  },
  {
    "countryNameEn": "Japan",
    "countryNameLocal": "日本",
    "countryCode": "JP",
    "currencyCode": "JPY",
    "currencyNameEn": "Japanese yen",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ja",
    "officialLanguageNameEn": "Japanese",
    "officialLanguageNameLocal": "日本語 (にほんご)",
    "countryCallingCode": "81",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇯🇵"
  },
  {
    "countryNameEn": "Kenya",
    "countryNameLocal": "Kenya",
    "countryCode": "KE",
    "currencyCode": "KES",
    "currencyNameEn": "Kenyan shilling",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "sw",
    "officialLanguageNameEn": "Swahili",
    "officialLanguageNameLocal": "Kiswahili",
    "countryCallingCode": "254",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇰🇪"
  },
  {
    "countryNameEn": "Kyrgyzstan",
    "countryNameLocal": "Кыргызстан, Киргизия",
    "countryCode": "KG",
    "currencyCode": "KGS",
    "currencyNameEn": "Kyrgyzstani som",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ky",
    "officialLanguageNameEn": "Kirghiz, Kyrgyz",
    "officialLanguageNameLocal": "Кыргызча, Кыргыз тили",
    "countryCallingCode": "996",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇰🇬"
  },
  {
    "countryNameEn": "Cambodia",
    "countryNameLocal": "កម្ពុជា",
    "countryCode": "KH",
    "currencyCode": "KHR",
    "currencyNameEn": "Cambodian riel",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "km",
    "officialLanguageNameEn": "Central Khmer",
    "officialLanguageNameLocal": "ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ",
    "countryCallingCode": "855",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇰🇭"
  },
  {
    "countryNameEn": "North Korea",
    "countryNameLocal": "조선민주주의인민공화국",
    "countryCode": "KP",
    "currencyCode": "KPW",
    "currencyNameEn": "North Korean won",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ko",
    "officialLanguageNameEn": "Korean",
    "officialLanguageNameLocal": "조선어",
    "countryCallingCode": "850",
    "areaCodes": [],
    "region": "Asia",
    "flag": "🇰🇵"
  },
  {
    "countryNameEn": "South Korea",
    "countryNameLocal": "대한민국",
    "countryCode": "KR",
    "currencyCode": "KRW",
    "currencyNameEn": "South Korean won",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ko",
    "officialLanguageNameEn": "Korean",
    "officialLanguageNameLocal": "한국어",
    "countryCallingCode": "82",
    "areaCodes": [],
    "region": "Asia",
    "flag": "🇰🇷"
  },
  {
    "countryNameEn": "Kiribati",
    "countryNameLocal": "Kiribati",
    "countryCode": "KI",
    "currencyCode": "AUD",
    "currencyNameEn": "Australian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "686",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇰🇮"
  },
  {
    "countryNameEn": "Saint Kitts and Nevis",
    "countryNameLocal": "Saint Kitts and Nevis",
    "countryCode": "KN",
    "currencyCode": "XCD",
    "currencyNameEn": "East Caribbean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1869",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇰🇳"
  },
  {
    "countryNameEn": "Kuwait",
    "countryNameLocal": "الكويت",
    "countryCode": "KW",
    "currencyCode": "KWD",
    "currencyNameEn": "Kuwaiti dinar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "965",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇰🇼"
  },
  {
    "countryNameEn": "Kazakhstan",
    "countryNameLocal": "Қазақстан, Казахстан",
    "countryCode": "KZ",
    "currencyCode": "KZT",
    "currencyNameEn": "Kazakhstani tenge",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "kk",
    "officialLanguageNameEn": "Kazakh",
    "officialLanguageNameLocal": "қазақ тілі",
    "countryCallingCode": "7",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇰🇿"
  },
  {
    "countryNameEn": "Lebanon",
    "countryNameLocal": "لبنان, Liban",
    "countryCode": "LB",
    "currencyCode": "LBP",
    "currencyNameEn": "Lebanese pound",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "961",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇱🇧"
  },
  {
    "countryNameEn": "Saint Lucia",
    "countryNameLocal": "Saint Lucia",
    "countryCode": "LC",
    "currencyCode": "XCD",
    "currencyNameEn": "East Caribbean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1758",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇱🇨"
  },
  {
    "countryNameEn": "Liechtenstein",
    "countryNameLocal": "Liechtenstein",
    "countryCode": "LI",
    "currencyCode": "CHF",
    "currencyNameEn": "Swiss franc",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "de",
    "officialLanguageNameEn": "German",
    "officialLanguageNameLocal": "Deutsch",
    "countryCallingCode": "423",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇱🇮"
  },
  {
    "countryNameEn": "Sri Lanka",
    "countryNameLocal": "ශ්‍රී ලංකා, இலங்கை",
    "countryCode": "LK",
    "currencyCode": "LKR",
    "currencyNameEn": "Sri Lankan rupee",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "si",
    "officialLanguageNameEn": "Sinhala, Sinhalese",
    "officialLanguageNameLocal": "සිංහල",
    "countryCallingCode": "94",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇱🇰"
  },
  {
    "countryNameEn": "Liberia",
    "countryNameLocal": "Liberia",
    "countryCode": "LR",
    "currencyCode": "LRD",
    "currencyNameEn": "Liberian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "231",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇱🇷"
  },
  {
    "countryNameEn": "Lesotho",
    "countryNameLocal": "Lesotho",
    "countryCode": "LS",
    "currencyCode": "LSL",
    "currencyNameEn": "Lesotho loti",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "266",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇱🇸"
  },
  {
    "countryNameEn": "Lithuania",
    "countryNameLocal": "Lietuva",
    "countryCode": "LT",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "PVM kodas",
    "tinName": "PVM (abbrev. Pridėtinės vertės mokestis) mokėtojo kodas",
    "officialLanguageCode": "lt",
    "officialLanguageNameEn": "Lithuanian",
    "officialLanguageNameLocal": "lietuvių kalba",
    "countryCallingCode": "370",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇱🇹"
  },
  {
    "countryNameEn": "Luxembourg",
    "countryNameLocal": "Lëtzebuerg, Luxembourg, Luxemburg",
    "countryCode": "LU",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "No. TVA",
    "tinName": "Numéro d'identification à la taxe sur la valeur ajoutée",
    "officialLanguageCode": "lb",
    "officialLanguageNameEn": "Luxembourgish, Letzeburgesch",
    "officialLanguageNameLocal": "Lëtzebuergesch",
    "countryCallingCode": "352",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇱🇺"
  },
  {
    "countryNameEn": "Latvia",
    "countryNameLocal": "Latvija",
    "countryCode": "LV",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "PVN",
    "tinName": "Pievienotās vērtības nodokļa (PVN) reģistrācijas numurs",
    "officialLanguageCode": "lv",
    "officialLanguageNameEn": "Latvian",
    "officialLanguageNameLocal": "latviešu valoda",
    "countryCallingCode": "371",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇱🇻"
  },
  {
    "countryNameEn": "Libya",
    "countryNameLocal": "ليبيا",
    "countryCode": "LY",
    "currencyCode": "LYD",
    "currencyNameEn": "Libyan dinar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "218",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇱🇾"
  },
  {
    "countryNameEn": "Morocco",
    "countryNameLocal": "Maroc, ⵍⵎⵖⵔⵉⴱ, المغرب",
    "countryCode": "MA",
    "currencyCode": "MAD",
    "currencyNameEn": "Moroccan dirham",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "212",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇲🇦"
  },
  {
    "countryNameEn": "Monaco",
    "countryNameLocal": "Monaco",
    "countryCode": "MC",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "377",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇲🇨"
  },
  {
    "countryNameEn": "Montenegro",
    "countryNameLocal": "Crna Gora, Црна Гора",
    "countryCode": "ME",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "srp",
    "officialLanguageNameEn": "српски језик",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "382",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇲🇪"
  },
  {
    "countryNameEn": "Saint Martin (French part)",
    "countryNameLocal": "Saint-Martin",
    "countryCode": "MF",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "590",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇲🇫"
  },
  {
    "countryNameEn": "Madagascar",
    "countryNameLocal": "Madagasikara, Madagascar",
    "countryCode": "MG",
    "currencyCode": "MGA",
    "currencyNameEn": "Malagasy ariary",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "mg",
    "officialLanguageNameEn": "Malagasy",
    "officialLanguageNameLocal": "fiteny malagasy",
    "countryCallingCode": "261",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇲🇬"
  },
  {
    "countryNameEn": "Mali",
    "countryNameLocal": "Mali",
    "countryCode": "ML",
    "currencyCode": "XOF",
    "currencyNameEn": "CFA franc BCEAO",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "223",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇲🇱"
  },
  {
    "countryNameEn": "Myanmar",
    "countryNameLocal": "မြန်မာ",
    "countryCode": "MM",
    "currencyCode": "MMK",
    "currencyNameEn": "Myanmar kyat",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "my",
    "officialLanguageNameEn": "Burmese",
    "officialLanguageNameLocal": "ဗမာစာ",
    "countryCallingCode": "95",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇲🇲"
  },
  {
    "countryNameEn": "Mongolia",
    "countryNameLocal": "Монгол Улс",
    "countryCode": "MN",
    "currencyCode": "MNT",
    "currencyNameEn": "Mongolian tögrög",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "mn",
    "officialLanguageNameEn": "Mongolian",
    "officialLanguageNameLocal": "Монгол хэл",
    "countryCallingCode": "976",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇲🇳"
  },
  {
    "countryNameEn": "Macao",
    "countryNameLocal": "澳門, Macau",
    "countryCode": "MO",
    "currencyCode": "MOP",
    "currencyNameEn": "Macanese pataca",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "zh-hant",
    "officialLanguageNameEn": "",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "853",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇲🇴"
  },
  {
    "countryNameEn": "Martinique",
    "countryNameLocal": "Martinique",
    "countryCode": "MQ",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "596",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇲🇶"
  },
  {
    "countryNameEn": "Mauritania",
    "countryNameLocal": "موريتانيا, Mauritanie",
    "countryCode": "MR",
    "currencyCode": "MRU",
    "currencyNameEn": "",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "222",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇲🇷"
  },
  {
    "countryNameEn": "Montserrat",
    "countryNameLocal": "Montserrat",
    "countryCode": "MS",
    "currencyCode": "XCD",
    "currencyNameEn": "East Caribbean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1664",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇲🇸"
  },
  {
    "countryNameEn": "Malta",
    "countryNameLocal": "Malta",
    "countryCode": "MT",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "Vat No.",
    "tinName": "Vat reg. no.",
    "officialLanguageCode": "mt",
    "officialLanguageNameEn": "Maltese",
    "officialLanguageNameLocal": "Malti",
    "countryCallingCode": "356",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇲🇹"
  },
  {
    "countryNameEn": "Mauritius",
    "countryNameLocal": "Maurice, Mauritius",
    "countryCode": "MU",
    "currencyCode": "MUR",
    "currencyNameEn": "Mauritian rupee",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "mfe",
    "officialLanguageNameEn": "",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "230",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇲🇺"
  },
  {
    "countryNameEn": "Maldives",
    "countryNameLocal": "",
    "countryCode": "MV",
    "currencyCode": "MVR",
    "currencyNameEn": "Maldivian rufiyaa",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "dv",
    "officialLanguageNameEn": "Divehi, Dhivehi, Maldivian",
    "officialLanguageNameLocal": "ދިވެހި",
    "countryCallingCode": "960",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇲🇻"
  },
  {
    "countryNameEn": "Malawi",
    "countryNameLocal": "Malawi",
    "countryCode": "MW",
    "currencyCode": "MWK",
    "currencyNameEn": "Malawian kwacha",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "265",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇲🇼"
  },
  {
    "countryNameEn": "Mexico",
    "countryNameLocal": "México",
    "countryCode": "MX",
    "currencyCode": "MXN",
    "currencyNameEn": "Mexican peso",
    "tinType": "RFC",
    "tinName": "Registro Federal de Contribuyentes",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "52",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇲🇽"
  },
  {
    "countryNameEn": "Malaysia",
    "countryNameLocal": "",
    "countryCode": "MY",
    "currencyCode": "MYR",
    "currencyNameEn": "Malaysian ringgit",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ms",
    "officialLanguageNameEn": "Malay",
    "officialLanguageNameLocal": "Bahasa Melayu, بهاس ملايو‎",
    "countryCallingCode": "60",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇲🇾"
  },
  {
    "countryNameEn": "Mozambique",
    "countryNameLocal": "Mozambique",
    "countryCode": "MZ",
    "currencyCode": "MZN",
    "currencyNameEn": "Mozambican metical",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "pt",
    "officialLanguageNameEn": "Portuguese",
    "officialLanguageNameLocal": "Português",
    "countryCallingCode": "258",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇲🇿"
  },
  {
    "countryNameEn": "Namibia",
    "countryNameLocal": "Namibia",
    "countryCode": "NA",
    "currencyCode": "NAD",
    "currencyNameEn": "Namibian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "264",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇳🇦"
  },
  {
    "countryNameEn": "New Caledonia",
    "countryNameLocal": "Nouvelle-Calédonie",
    "countryCode": "NC",
    "currencyCode": "XPF",
    "currencyNameEn": "CFP franc (franc Pacifique)",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "687",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇳🇨"
  },
  {
    "countryNameEn": "Norfolk Island",
    "countryNameLocal": "Norfolk Island",
    "countryCode": "NF",
    "currencyCode": "AUD",
    "currencyNameEn": "Australian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "672",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇳🇫"
  },
  {
    "countryNameEn": "Nigeria",
    "countryNameLocal": "Nigeria",
    "countryCode": "NG",
    "currencyCode": "NGN",
    "currencyNameEn": "Nigerian naira",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "234",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇳🇬"
  },
  {
    "countryNameEn": "Nicaragua",
    "countryNameLocal": "Nicaragua",
    "countryCode": "NI",
    "currencyCode": "NIO",
    "currencyNameEn": "Nicaraguan córdoba",
    "tinType": "RUC",
    "tinName": "Registro Unico de Contribuyentes",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "505",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇳🇮"
  },
  {
    "countryNameEn": "Norway",
    "countryNameLocal": "Norge, Noreg",
    "countryCode": "NO",
    "currencyCode": "NOK",
    "currencyNameEn": "Norwegian krone",
    "tinType": "Orgnr",
    "tinName": "Organisasjonsnummer",
    "officialLanguageCode": "nb",
    "officialLanguageNameEn": "Norwegian Bokmål",
    "officialLanguageNameLocal": "Norsk Bokmål",
    "countryCallingCode": "47",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇳🇴"
  },
  {
    "countryNameEn": "Nepal",
    "countryNameLocal": "",
    "countryCode": "NP",
    "currencyCode": "NPR",
    "currencyNameEn": "Nepalese rupee",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ne",
    "officialLanguageNameEn": "Nepali",
    "officialLanguageNameLocal": "नेपाली",
    "countryCallingCode": "977",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇳🇵"
  },
  {
    "countryNameEn": "Nauru",
    "countryNameLocal": "Nauru",
    "countryCode": "NR",
    "currencyCode": "AUD",
    "currencyNameEn": "Australian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "na",
    "officialLanguageNameEn": "Nauru",
    "officialLanguageNameLocal": "Dorerin Naoero",
    "countryCallingCode": "674",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇳🇷"
  },
  {
    "countryNameEn": "Niue",
    "countryNameLocal": "Niue",
    "countryCode": "NU",
    "currencyCode": "NZD",
    "currencyNameEn": "New Zealand dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "niu",
    "officialLanguageNameEn": "",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "683",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇳🇺"
  },
  {
    "countryNameEn": "New Zealand",
    "countryNameLocal": "New Zealand",
    "countryCode": "NZ",
    "currencyCode": "NZD",
    "currencyNameEn": "New Zealand dollar",
    "tinType": "NZBN",
    "tinName": "NZ Business Number",
    "officialLanguageCode": "mi",
    "officialLanguageNameEn": "Maori",
    "officialLanguageNameLocal": "te reo Māori",
    "countryCallingCode": "64",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇳🇿"
  },
  {
    "countryNameEn": "Oman",
    "countryNameLocal": "سلطنة عُمان",
    "countryCode": "OM",
    "currencyCode": "OMR",
    "currencyNameEn": "Omani rial",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "968",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇴🇲"
  },
  {
    "countryNameEn": "Panama",
    "countryNameLocal": "Panama",
    "countryCode": "PA",
    "currencyCode": "PAB",
    "currencyNameEn": "Panamanian balboa",
    "tinType": "RUC",
    "tinName": "Registro Unico de Contribuyentes",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "507",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇵🇦"
  },
  {
    "countryNameEn": "Peru",
    "countryNameLocal": "Perú",
    "countryCode": "PE",
    "currencyCode": "PEN",
    "currencyNameEn": "Peruvian sol",
    "tinType": "RUC",
    "tinName": "Registro Unico de Contribuyentes",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "51",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇵🇪"
  },
  {
    "countryNameEn": "French Polynesia",
    "countryNameLocal": "Polynésie française",
    "countryCode": "PF",
    "currencyCode": "XPF",
    "currencyNameEn": "CFP franc (franc Pacifique)",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "689",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇵🇫"
  },
  {
    "countryNameEn": "Papua New Guinea",
    "countryNameLocal": "Papua New Guinea",
    "countryCode": "PG",
    "currencyCode": "PGK",
    "currencyNameEn": "Papua New Guinean kina",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "675",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇵🇬"
  },
  {
    "countryNameEn": "Pakistan",
    "countryNameLocal": "پاکستان",
    "countryCode": "PK",
    "currencyCode": "PKR",
    "currencyNameEn": "Pakistani rupee",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "92",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇵🇰"
  },
  {
    "countryNameEn": "Poland",
    "countryNameLocal": "Polska",
    "countryCode": "PL",
    "currencyCode": "PLN",
    "currencyNameEn": "Polish złoty",
    "tinType": "NIP",
    "tinName": "numer identyfikacji podatkowej",
    "officialLanguageCode": "pl",
    "officialLanguageNameEn": "Polish",
    "officialLanguageNameLocal": "język polski, polszczyzna",
    "countryCallingCode": "48",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇵🇱"
  },
  {
    "countryNameEn": "Saint Pierre and Miquelon",
    "countryNameLocal": "Saint-Pierre-et-Miquelon",
    "countryCode": "PM",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "508",
    "areaCodes": [],
    "region": "North America",
    "flag": "🇵🇲"
  },
  {
    "countryNameEn": "Pitcairn",
    "countryNameLocal": "Pitcairn",
    "countryCode": "PN",
    "currencyCode": "NZD",
    "currencyNameEn": "New Zealand dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "64",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇵🇳"
  },
  {
    "countryNameEn": "Puerto Rico",
    "countryNameLocal": "Puerto Rico",
    "countryCode": "PR",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "1",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇵🇷"
  },
  {
    "countryNameEn": "Palestine, State of",
    "countryNameLocal": "Palestinian Territory",
    "countryCode": "PS",
    "currencyCode": "",
    "currencyNameEn": "",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "970",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇵🇸"
  },
  {
    "countryNameEn": "Portugal",
    "countryNameLocal": "Portugal",
    "countryCode": "PT",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "NIPC",
    "tinName": "Número de Identificação de Pessoa Coletiva (NIPC)",
    "officialLanguageCode": "pt",
    "officialLanguageNameEn": "Portuguese",
    "officialLanguageNameLocal": "Português",
    "countryCallingCode": "351",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇵🇹"
  },
  {
    "countryNameEn": "Palau",
    "countryNameLocal": "Palau",
    "countryCode": "PW",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "680",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇵🇼"
  },
  {
    "countryNameEn": "Paraguay",
    "countryNameLocal": "Paraguay",
    "countryCode": "PY",
    "currencyCode": "PYG",
    "currencyNameEn": "Paraguayan guaraní",
    "tinType": "RUC",
    "tinName": "Registro Unico de Contribuyentes",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "595",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇵🇾"
  },
  {
    "countryNameEn": "Qatar",
    "countryNameLocal": "قطر",
    "countryCode": "QA",
    "currencyCode": "QAR",
    "currencyNameEn": "Qatari riyal",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "974",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇶🇦"
  },
  {
    "countryNameEn": "Réunion",
    "countryNameLocal": "La Réunion",
    "countryCode": "RE",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "262",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇷🇪"
  },
  {
    "countryNameEn": "Romania",
    "countryNameLocal": "România",
    "countryCode": "RO",
    "currencyCode": "RON",
    "currencyNameEn": "Romanian leu",
    "tinType": "CIF",
    "tinName": "Codul de identificare fiscală",
    "officialLanguageCode": "ro",
    "officialLanguageNameEn": "Romanian, Moldavian, Moldovan",
    "officialLanguageNameLocal": "Română",
    "countryCallingCode": "40",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇷🇴"
  },
  {
    "countryNameEn": "Serbia",
    "countryNameLocal": "Србија",
    "countryCode": "RS",
    "currencyCode": "RSD",
    "currencyNameEn": "Serbian dinar",
    "tinType": "PIB",
    "tinName": "Poreski identifikacioni broj",
    "officialLanguageCode": "sr",
    "officialLanguageNameEn": "Serbian",
    "officialLanguageNameLocal": "српски језик",
    "countryCallingCode": "381",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇷🇸"
  },
  {
    "countryNameEn": "Russia",
    "countryNameLocal": "Россия",
    "countryCode": "RU",
    "currencyCode": "RUB",
    "currencyNameEn": "Russian ruble",
    "tinType": "ИНН",
    "tinName": "Идентификационный номер налогоплательщика",
    "officialLanguageCode": "ru",
    "officialLanguageNameEn": "Russian",
    "officialLanguageNameLocal": "русский",
    "countryCallingCode": "7",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇷🇺"
  },
  {
    "countryNameEn": "Rwanda",
    "countryNameLocal": "Rwanda",
    "countryCode": "RW",
    "currencyCode": "RWF",
    "currencyNameEn": "Rwandan franc",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "rw",
    "officialLanguageNameEn": "Kinyarwanda",
    "officialLanguageNameLocal": "Ikinyarwanda",
    "countryCallingCode": "250",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇷🇼"
  },
  {
    "countryNameEn": "Saudi Arabia",
    "countryNameLocal": "السعودية",
    "countryCode": "SA",
    "currencyCode": "SAR",
    "currencyNameEn": "Saudi riyal",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "966",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇸🇦"
  },
  {
    "countryNameEn": "Solomon Islands",
    "countryNameLocal": "Solomon Islands",
    "countryCode": "SB",
    "currencyCode": "SBD",
    "currencyNameEn": "Solomon Islands dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "677",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇸🇧"
  },
  {
    "countryNameEn": "Seychelles",
    "countryNameLocal": "Seychelles",
    "countryCode": "SC",
    "currencyCode": "SCR",
    "currencyNameEn": "Seychelles rupee",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "248",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇸🇨"
  },
  {
    "countryNameEn": "Sweden",
    "countryNameLocal": "Sverige",
    "countryCode": "SE",
    "currencyCode": "SEK",
    "currencyNameEn": "Swedish krona/kronor",
    "tinType": "Momsnr.",
    "tinName": "VAT-nummer",
    "officialLanguageCode": "sv",
    "officialLanguageNameEn": "Swedish",
    "officialLanguageNameLocal": "Svenska",
    "countryCallingCode": "46",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇸🇪"
  },
  {
    "countryNameEn": "Singapore",
    "countryNameLocal": "Singapore",
    "countryCode": "SG",
    "currencyCode": "SGD",
    "currencyNameEn": "Singapore dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "zh-hans",
    "officialLanguageNameEn": "",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "65",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇸🇬"
  },
  {
    "countryNameEn": "Saint Helena, Ascension and Tristan da Cunha",
    "countryNameLocal": "Saint Helena",
    "countryCode": "SH",
    "currencyCode": "SHP",
    "currencyNameEn": "Saint Helena pound",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "290",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇸🇭"
  },
  {
    "countryNameEn": "Slovenia",
    "countryNameLocal": "Slovenija",
    "countryCode": "SI",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "ID za DDV",
    "tinName": "Davčna številka",
    "officialLanguageCode": "sl",
    "officialLanguageNameEn": "Slovenian",
    "officialLanguageNameLocal": "Slovenski Jezik, Slovenščina",
    "countryCallingCode": "386",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇸🇮"
  },
  {
    "countryNameEn": "Svalbard and Jan Mayen",
    "countryNameLocal": "Svalbard and Jan Mayen",
    "countryCode": "SJ",
    "currencyCode": "NOK",
    "currencyNameEn": "Norwegian krone",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "no",
    "officialLanguageNameEn": "Norwegian",
    "officialLanguageNameLocal": "Norsk",
    "countryCallingCode": "4779",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇸🇯"
  },
  {
    "countryNameEn": "Slovakia",
    "countryNameLocal": "Slovensko",
    "countryCode": "SK",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "IČ DPH",
    "tinName": "Identifikačné číslo pre daň z pridanej hodnoty",
    "officialLanguageCode": "sk",
    "officialLanguageNameEn": "Slovak",
    "officialLanguageNameLocal": "Slovenčina, Slovenský Jazyk",
    "countryCallingCode": "421",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇸🇰"
  },
  {
    "countryNameEn": "Sierra Leone",
    "countryNameLocal": "Sierra Leone",
    "countryCode": "SL",
    "currencyCode": "SLL",
    "currencyNameEn": "Sierra Leonean leone",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "232",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇸🇱"
  },
  {
    "countryNameEn": "Republic of San Marino",
    "countryNameLocal": "Repubblica di San Marino",
    "countryCode": "SM",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "C.O.E.",
    "tinName": "Codice operatore economico",
    "officialLanguageCode": "it",
    "officialLanguageNameEn": "Italian",
    "officialLanguageNameLocal": "Italiano",
    "countryCallingCode": "378",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇸🇲"
  },
  {
    "countryNameEn": "Senegal",
    "countryNameLocal": "Sénégal",
    "countryCode": "SN",
    "currencyCode": "XOF",
    "currencyNameEn": "CFA franc BCEAO",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "221",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇸🇳"
  },
  {
    "countryNameEn": "Somalia",
    "countryNameLocal": "Somalia, الصومال",
    "countryCode": "SO",
    "currencyCode": "SOS",
    "currencyNameEn": "Somali shilling",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "so",
    "officialLanguageNameEn": "Somali",
    "officialLanguageNameLocal": "Soomaaliga, af Soomaali",
    "countryCallingCode": "252",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇸🇴"
  },
  {
    "countryNameEn": "Suriname",
    "countryNameLocal": "Suriname",
    "countryCode": "SR",
    "currencyCode": "SRD",
    "currencyNameEn": "Surinamese dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "nl",
    "officialLanguageNameEn": "Dutch, Flemish",
    "officialLanguageNameLocal": "Nederlands, Vlaams",
    "countryCallingCode": "597",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇸🇷"
  },
  {
    "countryNameEn": "South Sudan",
    "countryNameLocal": "South Sudan",
    "countryCode": "SS",
    "currencyCode": "SSP",
    "currencyNameEn": "South Sudanese pound",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "211",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇸🇸"
  },
  {
    "countryNameEn": "Sao Tome and Principe",
    "countryNameLocal": "São Tomé e Príncipe",
    "countryCode": "ST",
    "currencyCode": "STN",
    "currencyNameEn": "",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "pt",
    "officialLanguageNameEn": "Portuguese",
    "officialLanguageNameLocal": "Português",
    "countryCallingCode": "239",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇸🇹"
  },
  {
    "countryNameEn": "El Salvador",
    "countryNameLocal": "El Salvador",
    "countryCode": "SV",
    "currencyCode": "SVC",
    "currencyNameEn": "Salvadoran colón",
    "tinType": "NIT",
    "tinName": "Número de Identificación Tributaria",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "503",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇸🇻"
  },
  {
    "countryNameEn": "Sint Maarten (Dutch part)",
    "countryNameLocal": "Sint Maarten",
    "countryCode": "SX",
    "currencyCode": "ANG",
    "currencyNameEn": "Netherlands Antillean guilder",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "nl",
    "officialLanguageNameEn": "Dutch, Flemish",
    "officialLanguageNameLocal": "Nederlands, Vlaams",
    "countryCallingCode": "1721",
    "areaCodes": [],
    "region": "Unknown",
    "flag": "🇸🇽"
  },
  {
    "countryNameEn": "Syrian Arab Republic",
    "countryNameLocal": "سوريا, Sūriyya",
    "countryCode": "SY",
    "currencyCode": "SYP",
    "currencyNameEn": "Syrian pound",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "963",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇸🇾"
  },
  {
    "countryNameEn": "Chad",
    "countryNameLocal": "Tchad, تشاد",
    "countryCode": "TD",
    "currencyCode": "XAF",
    "currencyNameEn": "CFA franc BEAC",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "235",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇹🇩"
  },
  {
    "countryNameEn": "Togo",
    "countryNameLocal": "Togo",
    "countryCode": "TG",
    "currencyCode": "XOF",
    "currencyNameEn": "CFA franc BCEAO",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "228",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇹🇬"
  },
  {
    "countryNameEn": "Thailand",
    "countryNameLocal": "ประเทศไทย",
    "countryCode": "TH",
    "currencyCode": "THB",
    "currencyNameEn": "Thai baht",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "th",
    "officialLanguageNameEn": "Thai",
    "officialLanguageNameLocal": "ไทย",
    "countryCallingCode": "66",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇹🇭"
  },
  {
    "countryNameEn": "Tajikistan",
    "countryNameLocal": ",",
    "countryCode": "TJ",
    "currencyCode": "TJS",
    "currencyNameEn": "Tajikistani somoni",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "tg",
    "officialLanguageNameEn": "Tajik",
    "officialLanguageNameLocal": "тоҷикӣ, toçikī, تاجیکی‎",
    "countryCallingCode": "992",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇹🇯"
  },
  {
    "countryNameEn": "Tokelau",
    "countryNameLocal": "Tokelau",
    "countryCode": "TK",
    "currencyCode": "NZD",
    "currencyNameEn": "New Zealand dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "tkl",
    "officialLanguageNameEn": "",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "690",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇹🇰"
  },
  {
    "countryNameEn": "Timor-Leste",
    "countryNameLocal": "Timor-Leste, Timor Lorosa'e",
    "countryCode": "TL",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "pt",
    "officialLanguageNameEn": "Portuguese",
    "officialLanguageNameLocal": "Português",
    "countryCallingCode": "670",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇹🇱"
  },
  {
    "countryNameEn": "Turkmenistan",
    "countryNameLocal": "Türkmenistan",
    "countryCode": "TM",
    "currencyCode": "TMT",
    "currencyNameEn": "Turkmenistan manat",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "tk",
    "officialLanguageNameEn": "Turkmen",
    "officialLanguageNameLocal": "Türkmen, Түркмен",
    "countryCallingCode": "993",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇹🇲"
  },
  {
    "countryNameEn": "Tunisia",
    "countryNameLocal": "تونس, Tunisie",
    "countryCode": "TN",
    "currencyCode": "TND",
    "currencyNameEn": "Tunisian dinar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "216",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇹🇳"
  },
  {
    "countryNameEn": "Tonga",
    "countryNameLocal": "Tonga",
    "countryCode": "TO",
    "currencyCode": "TOP",
    "currencyNameEn": "Tongan paʻanga",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "676",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇹🇴"
  },
  {
    "countryNameEn": "Turkey",
    "countryNameLocal": "Türkiye",
    "countryCode": "TR",
    "currencyCode": "TRY",
    "currencyNameEn": "Turkish lira",
    "tinType": "KDV",
    "tinName": "Vergi Kimlik Numarası",
    "officialLanguageCode": "tr",
    "officialLanguageNameEn": "Turkish",
    "officialLanguageNameLocal": "Türkçe",
    "countryCallingCode": "90",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇹🇷"
  },
  {
    "countryNameEn": "Trinidad and Tobago",
    "countryNameLocal": "Trinidad and Tobago",
    "countryCode": "TT",
    "currencyCode": "TTD",
    "currencyNameEn": "Trinidad and Tobago dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "868",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇹🇹"
  },
  {
    "countryNameEn": "Tuvalu",
    "countryNameLocal": "Tuvalu",
    "countryCode": "TV",
    "currencyCode": "AUD",
    "currencyNameEn": "Australian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "688",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇹🇻"
  },
  {
    "countryNameEn": "United Republic of Tanzania",
    "countryNameLocal": "Tanzania",
    "countryCode": "TZ",
    "currencyCode": "TZS",
    "currencyNameEn": "Tanzanian shilling",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "sw",
    "officialLanguageNameEn": "Swahili",
    "officialLanguageNameLocal": "Kiswahili",
    "countryCallingCode": "255",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇹🇿"
  },
  {
    "countryNameEn": "Ukraine",
    "countryNameLocal": "Україна",
    "countryCode": "UA",
    "currencyCode": "UAH",
    "currencyNameEn": "Ukrainian hryvnia",
    "tinType": "ІНПП",
    "tinName": "Ідентифікаційний номер платника податків",
    "officialLanguageCode": "uk",
    "officialLanguageNameEn": "Ukrainian",
    "officialLanguageNameLocal": "Українська",
    "countryCallingCode": "380",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇺🇦"
  },
  {
    "countryNameEn": "Uganda",
    "countryNameLocal": "Uganda",
    "countryCode": "UG",
    "currencyCode": "UGX",
    "currencyNameEn": "Ugandan shilling",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "256",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇺🇬"
  },
  {
    "countryNameEn": "United States of America",
    "countryNameLocal": "United States of America",
    "countryCode": "US",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "EIN",
    "tinName": "Tax Identification Number",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1",
    "areaCodes": [],
    "region": "North America",
    "flag": "🇺🇸"
  },
  {
    "countryNameEn": "Uruguay",
    "countryNameLocal": "Uruguay",
    "countryCode": "UY",
    "currencyCode": "UYU",
    "currencyNameEn": "Uruguayan peso",
    "tinType": "RUT",
    "tinName": "Registro Único Tributario",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "598",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇺🇾"
  },
  {
    "countryNameEn": "Uzbekistan",
    "countryNameLocal": "",
    "countryCode": "UZ",
    "currencyCode": "UZS",
    "currencyNameEn": "Uzbekistan som",
    "tinType": "СТИР",
    "tinName": "Солиқ тўловчиларнинг идентификация рақами",
    "officialLanguageCode": "uz",
    "officialLanguageNameEn": "Uzbek",
    "officialLanguageNameLocal": "Oʻzbek, Ўзбек, أۇزبېك‎",
    "countryCallingCode": "998",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇺🇿"
  },
  {
    "countryNameEn": "Saint Vincent and the Grenadines",
    "countryNameLocal": "Saint Vincent and the Grenadines",
    "countryCode": "VC",
    "currencyCode": "XCD",
    "currencyNameEn": "East Caribbean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1784",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇻🇨"
  },
  {
    "countryNameEn": "Venezuela (Bolivarian Republic of)",
    "countryNameLocal": "Venezuela",
    "countryCode": "VE",
    "currencyCode": "VES",
    "currencyNameEn": "",
    "tinType": "RIF",
    "tinName": "Registro de Informacion Fiscal",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "58",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇻🇪"
  },
  {
    "countryNameEn": "Virgin Islands (British)",
    "countryNameLocal": "British Virgin Islands",
    "countryCode": "VG",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1284",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇻🇬"
  },
  {
    "countryNameEn": "Virgin Islands (U.S.)",
    "countryNameLocal": "United States Virgin Islands",
    "countryCode": "VI",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1340",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇻🇮"
  },
  {
    "countryNameEn": "Vietnam",
    "countryNameLocal": "Việt Nam",
    "countryCode": "VN",
    "currencyCode": "VND",
    "currencyNameEn": "Vietnamese đồng",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "vi",
    "officialLanguageNameEn": "Vietnamese",
    "officialLanguageNameLocal": "Tiếng Việt",
    "countryCallingCode": "84",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇻🇳"
  },
  {
    "countryNameEn": "Vanuatu",
    "countryNameLocal": "Vanuatu",
    "countryCode": "VU",
    "currencyCode": "VUV",
    "currencyNameEn": "Vanuatu vatu",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "bi",
    "officialLanguageNameEn": "Bislama",
    "officialLanguageNameLocal": "Bislama",
    "countryCallingCode": "678",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇻🇺"
  },
  {
    "countryNameEn": "Wallis and Futuna",
    "countryNameLocal": "Wallis-et-Futuna",
    "countryCode": "WF",
    "currencyCode": "XPF",
    "currencyNameEn": "CFP franc (franc Pacifique)",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "681",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇼🇫"
  },
  {
    "countryNameEn": "Samoa",
    "countryNameLocal": "Samoa",
    "countryCode": "WS",
    "currencyCode": "WST",
    "currencyNameEn": "Samoan tala",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "sm",
    "officialLanguageNameEn": "Samoan",
    "officialLanguageNameLocal": "gagana fa'a Samoa",
    "countryCallingCode": "685",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇼🇸"
  },
  {
    "countryNameEn": "Yemen",
    "countryNameLocal": "اليَمَن",
    "countryCode": "YE",
    "currencyCode": "YER",
    "currencyNameEn": "Yemeni rial",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "967",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇾🇪"
  },
  {
    "countryNameEn": "Mayotte",
    "countryNameLocal": "Mayotte",
    "countryCode": "YT",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "262",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇾🇹"
  },
  {
    "countryNameEn": "South Africa",
    "countryNameLocal": "South Africa",
    "countryCode": "ZA",
    "currencyCode": "ZAR",
    "currencyNameEn": "South African rand",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "27",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇿🇦"
  },
  {
    "countryNameEn": "Zambia",
    "countryNameLocal": "Zambia",
    "countryCode": "ZM",
    "currencyCode": "ZMW",
    "currencyNameEn": "Zambian kwacha",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "260",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇿🇲"
  },
  {
    "countryNameEn": "Zimbabwe",
    "countryNameLocal": "Zimbabwe",
    "countryCode": "ZW",
    "currencyCode": "ZWL",
    "currencyNameEn": "Zimbabwean dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "263",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇿🇼"
  },
  {
    "countryNameEn": "Eswatini",
    "countryNameLocal": "Swaziland",
    "countryCode": "SZ",
    "currencyCode": "SZL",
    "currencyNameEn": "Swazi lilangeni",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "268",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇸🇿"
  },
  {
    "countryNameEn": "North Macedonia",
    "countryNameLocal": "Македонија",
    "countryCode": "MK",
    "currencyCode": "MKD",
    "currencyNameEn": "Macedonian denar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "mk",
    "officialLanguageNameEn": "Macedonian",
    "officialLanguageNameLocal": "македонски јазик",
    "countryCallingCode": "389",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇲🇰"
  },
  {
    "countryNameEn": "Philippines",
    "countryNameLocal": "Philippines",
    "countryCode": "PH",
    "currencyCode": "PHP",
    "currencyNameEn": "Philippine peso",
    "tinType": "TIN",
    "tinName": "Tax Identification Number",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "63",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇵🇭"
  },
  {
    "countryNameEn": "Netherlands",
    "countryNameLocal": "Nederland",
    "countryCode": "NL",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "Btw-nr.",
    "tinName": "Btw-nummer",
    "officialLanguageCode": "nl",
    "officialLanguageNameEn": "Dutch, Flemish",
    "officialLanguageNameLocal": "Nederlands, Vlaams",
    "countryCallingCode": "31",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇳🇱"
  },
  {
    "countryNameEn": "United Arab Emirates",
    "countryNameLocal": "دولة الإمارات العربيّة المتّحدة",
    "countryCode": "AE",
    "currencyCode": "AED",
    "currencyNameEn": "United Arab Emirates dirham",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "971",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇦🇪"
  },
  {
    "countryNameEn": "Republic of Moldova",
    "countryNameLocal": "Moldova, Молдавия",
    "countryCode": "MD",
    "currencyCode": "MDL",
    "currencyNameEn": "Moldovan leu",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ro",
    "officialLanguageNameEn": "Romanian, Moldavian, Moldovan",
    "officialLanguageNameLocal": "Română",
    "countryCallingCode": "373",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇲🇩"
  },
  {
    "countryNameEn": "Gambia",
    "countryNameLocal": "The Gambia",
    "countryCode": "GM",
    "currencyCode": "GMD",
    "currencyNameEn": "Gambian dalasi",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "220",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇬🇲"
  },
  {
    "countryNameEn": "Dominican Republic",
    "countryNameLocal": "República Dominicana",
    "countryCode": "DO",
    "currencyCode": "DOP",
    "currencyNameEn": "Dominican peso",
    "tinType": "RNC",
    "tinName": "Registro Nacional del Contribuyente",
    "officialLanguageCode": "es",
    "officialLanguageNameEn": "Spanish, Castilian",
    "officialLanguageNameLocal": "Español",
    "countryCallingCode": "1",
    "areaCodes": [],
    "region": "South/Latin America",
    "flag": "🇩🇴"
  },
  {
    "countryNameEn": "Sudan",
    "countryNameLocal": "السودان",
    "countryCode": "SD",
    "currencyCode": "SDG",
    "currencyNameEn": "Sudanese pound",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "ar",
    "officialLanguageNameEn": "Arabic",
    "officialLanguageNameLocal": "العربية",
    "countryCallingCode": "249",
    "areaCodes": [],
    "region": "Arab States",
    "flag": "🇸🇩"
  },
  {
    "countryNameEn": "Lao People's Democratic Republic",
    "countryNameLocal": "ປະຊາຊົນລາວ",
    "countryCode": "LA",
    "currencyCode": "LAK",
    "currencyNameEn": "Lao kip",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "lo",
    "officialLanguageNameEn": "Lao",
    "officialLanguageNameLocal": "ພາສາລາວ",
    "countryCallingCode": "856",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇱🇦"
  },
  {
    "countryNameEn": "Taiwan, Province of China",
    "countryNameLocal": "Taiwan",
    "countryCode": "TW",
    "currencyCode": "TWD",
    "currencyNameEn": "New Taiwan dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "zh-hant",
    "officialLanguageNameEn": "",
    "officialLanguageNameLocal": "",
    "countryCallingCode": "886",
    "areaCodes": [],
    "region": "Asia & Pacific",
    "flag": "🇹🇼"
  },
  {
    "countryNameEn": "Republic of the Congo",
    "countryNameLocal": "République du Congo",
    "countryCode": "CG",
    "currencyCode": "XAF",
    "currencyNameEn": "CFA franc BEAC",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "242",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇨🇬"
  },
  {
    "countryNameEn": "Czechia",
    "countryNameLocal": "Česká republika",
    "countryCode": "CZ",
    "currencyCode": "CZK",
    "currencyNameEn": "Czech koruna",
    "tinType": "DIČ",
    "tinName": "Daňové identifikační číslo",
    "officialLanguageCode": "cs",
    "officialLanguageNameEn": "Czech",
    "officialLanguageNameLocal": "Čeština",
    "countryCallingCode": "420",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇨🇿"
  },
  {
    "countryNameEn": "United Kingdom",
    "countryNameLocal": "Great Britain",
    "countryCode": "GB",
    "currencyCode": "GBP",
    "currencyNameEn": "Pound sterling",
    "tinType": "VAT Reg No",
    "tinName": "Value added tax registration number",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "44",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇬🇧"
  },
  {
    "countryNameEn": "Niger",
    "countryNameLocal": "Niger",
    "countryCode": "NE",
    "currencyCode": "XOF",
    "currencyNameEn": "CFA franc BCEAO",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "227",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇳🇪"
  },
  {
    "countryNameEn": "Democratic Republic of the Congo",
    "countryNameLocal": "Democratic Republic of the Congo",
    "countryCode": "CD",
    "currencyCode": "CDF",
    "currencyNameEn": "Congolese franc",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "243",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇨🇩",
  },
  {
    "countryNameEn": "Commonwealth of The Bahamas",
    "countryNameLocal": "Commonwealth of The Bahamas",
    "countryCode": "BS",
    "currencyCode": "BSD",
    "currencyNameEn": "Bahamian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1 242",
    "areaCodes": [],
    "region": "Caribbean",
    "flag": "🇧🇸",
  },
  {
    "countryNameEn": "Cocos (Keeling) Islands",
    "countryNameLocal": "Pulu Kokos (Keeling)",
    "countryCode": "CC",
    "currencyCode": "AUD",
    "currencyNameEn": "Australian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "61 891",
    "areaCodes": [],
    "region": "Australia",
    "flag": "🇨🇨",
  },
  {
    "countryNameEn": "Central African Republic",
    "countryNameLocal": "République centrafricaine",
    "countryCode": "CF",
    "currencyCode": "XAF",
    "currencyNameEn": "Central African CFA",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "236",
    "areaCodes": [],
    "region": "Africa",
    "flag": "🇨🇫",
  },
  {
    "countryNameEn": "Cook Islands",
    "countryNameLocal": "Kūki 'Āirani",
    "countryCode": "CK",
    "currencyCode": "NZD",
    "currencyNameEn": "New Zealand dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "682",
    "areaCodes": [],
    "region": "South Pacific Ocean",
    "flag": "🇨🇰",
  },
  {
    "countryNameEn": "Falkland Islands",
    "countryNameLocal": "Falkland Islands",
    "countryCode": "FK",
    "currencyCode": "FKP",
    "currencyNameEn": "Falklands pound",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "500",
    "areaCodes": [],
    "region": "South Atlantic Ocean",
    "flag": "🇫🇰",
  },
  {
    "countryNameEn": "Faroe Islands",
    "countryNameLocal": "Færøerne",
    "countryCode": "FO",
    "currencyCode": "DKK",
    "currencyNameEn": "Faroese króna",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "da",
    "officialLanguageNameEn": "Danish",
    "officialLanguageNameLocal": "dansk",
    "countryCallingCode": "298",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇫🇴",
  },
  {
    "countryNameEn": "Territory of Heard Island and McDonald Islands",
    "countryNameLocal": "Territory of Heard Island and McDonald Islands",
    "countryCode": "HM",
    "currencyCode": "AUD",
    "currencyNameEn": "Australian dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "672",
    "areaCodes": [],
    "region": "Indian Ocean",
    "flag": "🇭🇲",
  },
  {
    "countryNameEn": "British Indian Ocean Territory",
    "countryNameLocal": "British Indian Ocean Territory",
    "countryCode": "IO",
    "currencyCode": "USD",
    "currencyNameEn": "United States Dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "246",
    "areaCodes": [],
    "region": "Indian Ocean",
    "flag": "🇮🇴",
  },
  {
    "countryNameEn": "Comoros",
    "countryNameLocal": "Umoja wa Komori",
    "countryCode": "KM",
    "currencyCode": "KMF",
    "currencyNameEn": "Comorian franc",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "269",
    "areaCodes": [],
    "region": "Indian Ocean",
    "flag": "🇰🇲",
  },
  {
    "countryNameEn": "Cayman Islands",
    "countryNameLocal": "Cayman Islands",
    "countryCode": "KY",
    "currencyCode": "KYD",
    "currencyNameEn": "Cayman Islands dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1 345",
    "areaCodes": [],
    "region": "Caribbean Sea",
    "flag": "🇰🇾",
  },
  {
    "countryNameEn": "Republic of the Marshall Islands",
    "countryNameLocal": "Aolepān Aorōkin Ṃajeḷ",
    "countryCode": "MH",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "692",
    "areaCodes": [],
    "region": "Pacific Ocean",
    "flag": "🇲🇭",
  },
  {
    "countryNameEn": "Commonwealth of the Northern Mariana Islands",
    "countryNameLocal": "Sankattan Siha Na Islas Mariånas",
    "countryCode": "MP",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1 670",
    "areaCodes": [],
    "region": "Pacific Ocean",
    "flag": "🇲🇵",
  },
  {
    "countryNameEn": "Turks and Caicos Islands",
    "countryNameLocal": "Turks and Caicos Islands",
    "countryCode": "TC",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1 649",
    "areaCodes": [],
    "region": "Atlantic Ocean",
    "flag": "🇹🇨",
  },
  {
    "countryNameEn": "French Southern and Antarctic Lands",
    "countryNameLocal": "Terres australes et antarctiques françaises",
    "countryCode": "TF",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "fr",
    "officialLanguageNameEn": "French",
    "officialLanguageNameLocal": "Français",
    "countryCallingCode": "672",
    "areaCodes": [],
    "region": "Indian Ocean",
    "flag": "🇹🇫",
  },
  {
    "countryNameEn": "United States Minor Outlying Islands",
    "countryNameLocal": "United States Minor Outlying Islands",
    "countryCode": "UM",
    "currencyCode": "USD",
    "currencyNameEn": "United States dollar",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "en",
    "officialLanguageNameEn": "English",
    "officialLanguageNameLocal": "English",
    "countryCallingCode": "1",
    "areaCodes": [],
    "region": "Pacific Ocean",
    "flag": "🇺🇲",
  },
  {
    "countryNameEn": "Holy See",
    "countryNameLocal": "Sancta Sedes",
    "countryCode": "VA",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "la",
    "officialLanguageNameEn": "Latin",
    "officialLanguageNameLocal": "lingua latīna",
    "countryCallingCode": "39",
    "areaCodes": [],
    "region": "Europe",
    "flag": "🇻🇦",
  },
  {
    "countryNameEn": "Republic of Kosovo",
    "countryNameLocal": "Republika e Kosovës",
    "countryCode": "XK",
    "currencyCode": "EUR",
    "currencyNameEn": "Euro",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "sq",
    "officialLanguageNameEn": "Albanian",
    "officialLanguageNameLocal": "Shqip",
    "countryCallingCode": "383",
    "region": "Europe",
    "flag": "🇽🇰",
  },
  {
    "countryNameEn": "Netherlands Antilles",
    "countryNameLocal": "Nederlandse Antillen",
    "countryCode": "AN",
    "currencyCode": "ANG",
    "currencyNameEn": "Netherlands Antillean guilder",
    "tinType": "",
    "tinName": "",
    "officialLanguageCode": "nl",
    "officialLanguageNameEn": "Dutch, Flemish",
    "officialLanguageNameLocal": "Nederlands, Vlaams",
    "countryCallingCode": "599",
    "region": "Europe",
    "flag": "🇧🇶",
  },
];

const groupBy = groupBy$1;
const supplant = supplant$1;
const countriesData = countriesData$1;

var countryCodesList = {  
  /**
   * Returns some module utils
   */
  utils: {
    groupBy: groupBy
  },

  /**
   * Returns the list with all the countries data
   */
  all: function () {
    return countriesData
  },
  /**
   * Filters the list of countries and returns those matching with the filter criteria
   * @param {String} countryProperty - The property to use in the filter. Must be any of the country properties (countryCode, currencyCode, etc)
   * @param {String} value - The value to use in the filter
   */
  filter: function (countryProperty, value) {
    return countriesData.filter(countryData => countryData[countryProperty] === value)
  },
  /**
   * Find a country by a property and return the first match
   * @param {String} countryProperty - The property to use in the search. Must be any of the country properties (countryCode, currencyCode, etc)
   * @param {String} value - The value to use in the filter
   */
  findOne: function (countryProperty, value) {
    return countriesData.find(countryData => countryData[countryProperty] === value)
  },
  /**
   * Returns a collection with fields mapped as requested
   * @param {*} fields - Map of fields and placeholders 
   */
  customArray: function (fields = { name: '{countryNameEn} ({countryCode})', value: '{countryCode}'}, { sortBy, sortDataBy, filter } = {}) {
    const finalCollection = [];

    let data = countriesData;
    if (typeof filter === 'function') {
      data = data.filter(filter);
    }

    if (sortDataBy) {
      // ignore upper and lowercase
      const collator = new Intl.Collator([], { sensitivity:'accent' });
      data.sort((a, b) => collator.compare(a[sortDataBy], b[sortDataBy]));
    }

    data.forEach(countryData => {
      let collectionObject = {};
      for (const field in fields) {
        collectionObject[field] = supplant(fields[field], countryData);
      }
      finalCollection.push(collectionObject);
    });

    if (sortBy && fields[sortBy]) {
      // ignore upper and lowercase
      const collator = new Intl.Collator([], {sensitivity:'accent'});
      finalCollection.sort((a, b) => collator.compare(a[sortBy], b[sortBy]));
    }

    return finalCollection
  },
  /**
   * Returns a custom object with the passed key as object key and a value made up with
   * values set in the placeholders of the label variable
   * @param {*} key - Key used to construct the object to return
   * @param {*} label - Placeholder like string, with all the fields that you want to use
   */
  customList: function (key = 'countryCode', label = '{countryNameEn} ({countryCode})', { filter } = {}) {
    const finalObject = {};
    let data = countriesData;
    if (typeof filter === 'function') {
      data = data.filter(filter);
    }
    data.forEach(countryData => {
      const value = supplant(label, countryData);
      finalObject[countryData[key]] = value;
    });

    return finalObject
  }
};

var countryCodes = /*@__PURE__*/getDefaultExportFromCjs(countryCodesList);

const timezonePath = "src/data/time_zone.csv";
let timezonedb;

const timezones = async function () {
  if (!timezonedb) {
    timezonedb = await readFileSync(timezonePath, {
      encoding: "utf8",
      flag: "r",
    }).toString();
  }

  const timezones = timezonedb.split(/\r\n|\n/).reduce((a, t) => {
    const tz = t.split(",");
    if (!tz[0]) {
      return a;
    }

    return {
      ...a,
      [tz[0]]: {
        country: tz[1],
        code: tz[2],
      },
    };
  }, {});

  return timezones;
};

var timezones$1 = await timezones();

var Home = {
  css: `home p span,[is="home"] p span{ font-size: 0.6em; max-width: 75%; margin: 0.6em auto 2em; display: block; }home div p.app,[is="home"] div p.app{ font-size: 0.8em; }home div.history,[is="home"] div.history{ margin-top: 2em; }home select,[is="home"] select{ display: inline; width: 8.8em; margin-right: 0.5em; padding: 0.14em 0.1em; font-size: 0.7em; }home select option,[is="home"] select option{ }home select option span.name,[is="home"] select option span.name{ text-overflow: ellipsis; }home input,[is="home"] input{ margin-top: 0.5em; line-height: 1.17em; width: 10em; font-size: 0.8em; }home div p.app input,[is="home"] div p.app input{ margin: 0.1em 0.2em 0; width: auto; }home p.button,[is="home"] p.button{ margin-top: 1em; }home button,[is="home"] button{ font-size: 0.7em; }home div.history h3,[is="home"] div.history h3{ margin-bottom: 1.2em; }home div.history p,[is="home"] div.history p{ font-size: 0.8em; }`,

  exports: {
    state: {
      codes: countryCodes.customList("countryNameEn", "{countryCallingCode}"),
      countryCodes: countryCodes.customList("countryCode", "{countryNameEn}"),
      activeCountry: "",
      activeNumber: "",
      appPresent: false,
      history: [],
    },

    onMounted() {

      const tz = Intl.DateTimeFormat().resolvedOptions();
      const country = timezones$1[tz.timeZone];
      let activeCountry;

      if(country){
        activeCountry = this.state.codes[this.state.countryCodes[country.country]];
      } else {
        activeCountry = Object.values(this.state.codes)[0];
      }

      this.update({
        activeCountry
      });
    },

    numberOnly(e) {
      return new RegExp(/[0-9]/).test(e.key);
    },

    phoneNumbeChange(p) {
      this.update({
        activeNumber: p.target.value,
      });
    },

    countryChange(e) {
      this.update({
        activeCountry: e.target.value,
      });
    },

    appPresentChange(e) {
      this.update({
        appPresent: !this.state.appPresent,
      });
    },

    chatNow(e) {
      e.preventDefault();

      const api =
        "https://api.whatsapp.com/send/?phone=[n]&text&type=phone_number&app_absent=[a]";
      const n = `${this.state.activeCountry}${this.state.activeNumber.replace(
        this.state.activeNumber.length > 10 ? new RegExp(/^0/) : "",
        ""
      )}`;
      const a = this.state.appPresent ? 0 : 1;
      const apid = api.replace("[n]", n).replace("[a]", a);

      const updateHistory = () => {
        this.update({
          history: this.state.history.concat([
            {
              [n]: apid,
            },
          ]),
        });
      };

      if (this.state.history.length > 0) {
        const findIndex = this.state.history.findIndex((hist) =>
          Object.keys(hist).includes(n)
        );

        if (findIndex > -1) {
          if (Object.values(this.state.history[findIndex]).includes(apid)) ; else {
            const history = this.state.history;
            history.splice(findIndex, 1, {
              [n]: apid,
            });

            this.update({
              history,
            });
          }
        } else {
          updateHistory();
        }
      } else {
        updateHistory();
      }

      window.open(apid, "_blank");
    }
  },

  template: (
    template,
    expressionTypes,
    bindingTypes,
    getComponent
  ) => template(
    '<h2>Hello <b>Stranger,</b></h2><p>\n    Chat with anyone on Whatsapp without saving the number to your contacts! <br/><span>\n      Ever had to chat with a number on whatsapp just once; perhaps to send some \n      information across or to complete some process? <br/>\n      Now you can, without saving the number as a contact.\n      </span></p><div><form expr5="expr5"></form></div><div class="history"><h3 expr12="expr12"> </h3><p expr13="expr13"></p><p expr15="expr15"></p></div>',
    [
      {
        type: bindingTypes.IF,
        evaluate: _scope => Object.keys(_scope.state.codes).length > 0,
        redundantAttribute: 'expr5',
        selector: '[expr5]',

        template: template(
          '<p><select expr6="expr6" name="countryCode"></select><input expr10="expr10" type="tel" pattern="[0-9]+" minlength="10" maxlength="11" placeholder="xxxxxxxxxx" required/><p class="app"><input expr11="expr11" id="appPresent" type="checkbox"/><label for="appPresent"> \n            Do you have Whatsapp installed?\n          </label></p></p><p class="button"><button> Chat Now </button></p>',
          [
            {
              expressions: [
                {
                  type: expressionTypes.EVENT,
                  name: 'onsubmit',
                  evaluate: _scope => _scope.chatNow
                }
              ]
            },
            {
              type: bindingTypes.IF,
              evaluate: _scope => Object.keys(_scope.state.codes).length > 0,
              redundantAttribute: 'expr6',
              selector: '[expr6]',

              template: template(
                '<option expr7="expr7"></option>',
                [
                  {
                    expressions: [
                      {
                        type: expressionTypes.ATTRIBUTE,
                        isBoolean: false,
                        name: 'value',
                        evaluate: _scope => _scope.state.activeCountry
                      },
                      {
                        type: expressionTypes.EVENT,
                        name: 'onchange',
                        evaluate: _scope => _scope.countryChange
                      }
                    ]
                  },
                  {
                    type: bindingTypes.EACH,
                    getKey: null,
                    condition: null,

                    template: template(
                      '<span expr8="expr8" class="name"> </span><span expr9="expr9"> </span>',
                      [
                        {
                          expressions: [
                            {
                              type: expressionTypes.ATTRIBUTE,
                              isBoolean: false,
                              name: 'value',
                              evaluate: _scope => _scope.cc[1]
                            },
                            {
                              type: expressionTypes.ATTRIBUTE,
                              isBoolean: false,
                              name: null,
                              evaluate: _scope => _scope.state.activeCountry === _scope.cc[1] ? {selected: "selected"} : {}
                            }
                          ]
                        },
                        {
                          redundantAttribute: 'expr8',
                          selector: '[expr8]',

                          expressions: [
                            {
                              type: expressionTypes.TEXT,
                              childNodeIndex: 0,

                              evaluate: _scope => [
                                _scope.cc[0]
                              ].join(
                                ''
                              )
                            }
                          ]
                        },
                        {
                          redundantAttribute: 'expr9',
                          selector: '[expr9]',

                          expressions: [
                            {
                              type: expressionTypes.TEXT,
                              childNodeIndex: 0,

                              evaluate: _scope => [
                                ' ',
                                '(+',
                                _scope.cc[1],
                                ')'
                              ].join(
                                ''
                              )
                            }
                          ]
                        }
                      ]
                    ),

                    redundantAttribute: 'expr7',
                    selector: '[expr7]',
                    itemName: 'cc',
                    indexName: null,

                    evaluate: _scope => Object.entries(
                      _scope.state.codes
                    )
                  }
                ]
              )
            },
            {
              redundantAttribute: 'expr10',
              selector: '[expr10]',

              expressions: [
                {
                  type: expressionTypes.VALUE,
                  evaluate: _scope => _scope.state.activeNumber
                },
                {
                  type: expressionTypes.EVENT,
                  name: 'onkeypress',
                  evaluate: _scope => _scope.numberOnly
                },
                {
                  type: expressionTypes.EVENT,
                  name: 'onchange',
                  evaluate: _scope => _scope.phoneNumbeChange
                }
              ]
            },
            {
              redundantAttribute: 'expr11',
              selector: '[expr11]',

              expressions: [
                {
                  type: expressionTypes.VALUE,
                  evaluate: _scope => _scope.state.appPresent
                },
                {
                  type: expressionTypes.EVENT,
                  name: 'onchange',
                  evaluate: _scope => _scope.appPresentChange
                }
              ]
            }
          ]
        )
      },
      {
        redundantAttribute: 'expr12',
        selector: '[expr12]',

        expressions: [
          {
            type: expressionTypes.TEXT,
            childNodeIndex: 0,

            evaluate: _scope => [
              'Previous Chats (',
              _scope.state.history.length,
              ')'
            ].join(
              ''
            )
          }
        ]
      },
      {
        type: bindingTypes.EACH,
        getKey: null,
        condition: null,

        template: template(
          '<a expr14="expr14" target="_blank"> </a>',
          [
            {
              redundantAttribute: 'expr14',
              selector: '[expr14]',

              expressions: [
                {
                  type: expressionTypes.TEXT,
                  childNodeIndex: 0,

                  evaluate: _scope => [
                    Object.keys(_scope.h)[0]
                  ].join(
                    ''
                  )
                },
                {
                  type: expressionTypes.ATTRIBUTE,
                  isBoolean: false,
                  name: 'href',
                  evaluate: _scope => Object.values(_scope.h)[0]
                },
                {
                  type: expressionTypes.ATTRIBUTE,
                  isBoolean: false,
                  name: 'title',
                  evaluate: _scope => Object.keys(_scope.h)[0]
                }
              ]
            }
          ]
        ),

        redundantAttribute: 'expr13',
        selector: '[expr13]',
        itemName: 'h',
        indexName: null,
        evaluate: _scope => _scope.state.history
      },
      {
        type: bindingTypes.IF,
        evaluate: _scope => _scope.state.history.length === 0,
        redundantAttribute: 'expr15',
        selector: '[expr15]',

        template: template(
          '\n      No history yet.\n    ',
          []
        )
      }
    ]
  ),

  name: 'home'
};

var routes = {
    HOME: {
        path: '/',
        label: 'Home',
        component: 'home'
    },
    ABOUT: {
        path: '/about',
        label: 'What\'s Whatsapp with Stangers?',
        component: 'about'
    }
};

var NotFound = {
  css: null,

  exports: withTypes(
    {
      ...routes
    }
  ),

  template: (
    template,
    expressionTypes,
    bindingTypes,
    getComponent
  ) => template(
    '<h1>Page not found</h1><p>Opsi, wrong page. Go back to <a expr16="expr16"> </a> :(</p>',
    [
      {
        redundantAttribute: 'expr16',
        selector: '[expr16]',

        expressions: [
          {
            type: expressionTypes.TEXT,
            childNodeIndex: 0,
            evaluate: _scope => _scope.HOME.label
          },
          {
            type: expressionTypes.ATTRIBUTE,
            isBoolean: false,
            name: 'href',
            evaluate: _scope => _scope.HOME.path
          }
        ]
      }
    ]
  ),

  name: 'not-found'
};

var About = {
  css: null,
  exports: null,

  template: (
    template,
    expressionTypes,
    bindingTypes,
    getComponent
  ) => template(
    '<h1>A <b>modern</b> runtime for <b>JavaScript</b> and <b>TypeScript</b>.</h1><p>Deno is a simple, modern and secure runtime for JavaScript, TypeScript, and WebAssembly that uses V8 and is built in Rust.</p><p><a href="https://deno.land/" target="_blank" rel="nofollow">Read More</a></p>',
    []
  ),

  name: 'about'
};

/**
 * Tokenize input string.
 */
function lexer(str) {
    var tokens = [];
    var i = 0;
    while (i < str.length) {
        var char = str[i];
        if (char === "*" || char === "+" || char === "?") {
            tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
            continue;
        }
        if (char === "\\") {
            tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
            continue;
        }
        if (char === "{") {
            tokens.push({ type: "OPEN", index: i, value: str[i++] });
            continue;
        }
        if (char === "}") {
            tokens.push({ type: "CLOSE", index: i, value: str[i++] });
            continue;
        }
        if (char === ":") {
            var name = "";
            var j = i + 1;
            while (j < str.length) {
                var code = str.charCodeAt(j);
                if (
                // `0-9`
                (code >= 48 && code <= 57) ||
                    // `A-Z`
                    (code >= 65 && code <= 90) ||
                    // `a-z`
                    (code >= 97 && code <= 122) ||
                    // `_`
                    code === 95) {
                    name += str[j++];
                    continue;
                }
                break;
            }
            if (!name)
                throw new TypeError("Missing parameter name at ".concat(i));
            tokens.push({ type: "NAME", index: i, value: name });
            i = j;
            continue;
        }
        if (char === "(") {
            var count = 1;
            var pattern = "";
            var j = i + 1;
            if (str[j] === "?") {
                throw new TypeError("Pattern cannot start with \"?\" at ".concat(j));
            }
            while (j < str.length) {
                if (str[j] === "\\") {
                    pattern += str[j++] + str[j++];
                    continue;
                }
                if (str[j] === ")") {
                    count--;
                    if (count === 0) {
                        j++;
                        break;
                    }
                }
                else if (str[j] === "(") {
                    count++;
                    if (str[j + 1] !== "?") {
                        throw new TypeError("Capturing groups are not allowed at ".concat(j));
                    }
                }
                pattern += str[j++];
            }
            if (count)
                throw new TypeError("Unbalanced pattern at ".concat(i));
            if (!pattern)
                throw new TypeError("Missing pattern at ".concat(i));
            tokens.push({ type: "PATTERN", index: i, value: pattern });
            i = j;
            continue;
        }
        tokens.push({ type: "CHAR", index: i, value: str[i++] });
    }
    tokens.push({ type: "END", index: i, value: "" });
    return tokens;
}
/**
 * Parse a string for the raw tokens.
 */
function parse(str, options) {
    if (options === void 0) { options = {}; }
    var tokens = lexer(str);
    var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
    var defaultPattern = "[^".concat(escapeString(options.delimiter || "/#?"), "]+?");
    var result = [];
    var key = 0;
    var i = 0;
    var path = "";
    var tryConsume = function (type) {
        if (i < tokens.length && tokens[i].type === type)
            return tokens[i++].value;
    };
    var mustConsume = function (type) {
        var value = tryConsume(type);
        if (value !== undefined)
            return value;
        var _a = tokens[i], nextType = _a.type, index = _a.index;
        throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
    };
    var consumeText = function () {
        var result = "";
        var value;
        while ((value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR"))) {
            result += value;
        }
        return result;
    };
    while (i < tokens.length) {
        var char = tryConsume("CHAR");
        var name = tryConsume("NAME");
        var pattern = tryConsume("PATTERN");
        if (name || pattern) {
            var prefix = char || "";
            if (prefixes.indexOf(prefix) === -1) {
                path += prefix;
                prefix = "";
            }
            if (path) {
                result.push(path);
                path = "";
            }
            result.push({
                name: name || key++,
                prefix: prefix,
                suffix: "",
                pattern: pattern || defaultPattern,
                modifier: tryConsume("MODIFIER") || "",
            });
            continue;
        }
        var value = char || tryConsume("ESCAPED_CHAR");
        if (value) {
            path += value;
            continue;
        }
        if (path) {
            result.push(path);
            path = "";
        }
        var open = tryConsume("OPEN");
        if (open) {
            var prefix = consumeText();
            var name_1 = tryConsume("NAME") || "";
            var pattern_1 = tryConsume("PATTERN") || "";
            var suffix = consumeText();
            mustConsume("CLOSE");
            result.push({
                name: name_1 || (pattern_1 ? key++ : ""),
                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
                prefix: prefix,
                suffix: suffix,
                modifier: tryConsume("MODIFIER") || "",
            });
            continue;
        }
        mustConsume("END");
    }
    return result;
}
/**
 * Escape a regular expression string.
 */
function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
/**
 * Get the flags for a regexp from the options.
 */
function flags(options) {
    return options && options.sensitive ? "" : "i";
}
/**
 * Pull out keys from a regexp.
 */
function regexpToRegexp(path, keys) {
    if (!keys)
        return path;
    var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
    var index = 0;
    var execResult = groupsRegex.exec(path.source);
    while (execResult) {
        keys.push({
            // Use parenthesized substring match if available, index otherwise
            name: execResult[1] || index++,
            prefix: "",
            suffix: "",
            modifier: "",
            pattern: "",
        });
        execResult = groupsRegex.exec(path.source);
    }
    return path;
}
/**
 * Transform an array into a regexp.
 */
function arrayToRegexp(paths, keys, options) {
    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });
    return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
/**
 * Create a path regexp from string input.
 */
function stringToRegexp(path, keys, options) {
    return tokensToRegexp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 */
function tokensToRegexp(tokens, keys, options) {
    if (options === void 0) { options = {}; }
    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
    var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
    var delimiterRe = "[".concat(escapeString(delimiter), "]");
    var route = start ? "^" : "";
    // Iterate over the tokens and create our regexp string.
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        if (typeof token === "string") {
            route += escapeString(encode(token));
        }
        else {
            var prefix = escapeString(encode(token.prefix));
            var suffix = escapeString(encode(token.suffix));
            if (token.pattern) {
                if (keys)
                    keys.push(token);
                if (prefix || suffix) {
                    if (token.modifier === "+" || token.modifier === "*") {
                        var mod = token.modifier === "*" ? "?" : "";
                        route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
                    }
                    else {
                        route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
                    }
                }
                else {
                    if (token.modifier === "+" || token.modifier === "*") {
                        route += "((?:".concat(token.pattern, ")").concat(token.modifier, ")");
                    }
                    else {
                        route += "(".concat(token.pattern, ")").concat(token.modifier);
                    }
                }
            }
            else {
                route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
            }
        }
    }
    if (end) {
        if (!strict)
            route += "".concat(delimiterRe, "?");
        route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
    }
    else {
        var endToken = tokens[tokens.length - 1];
        var isEndDelimited = typeof endToken === "string"
            ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1
            : endToken === undefined;
        if (!strict) {
            route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
        }
        if (!isEndDelimited) {
            route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
        }
    }
    return new RegExp(route, flags(options));
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 */
function pathToRegexp(path, keys, options) {
    if (path instanceof RegExp)
        return regexpToRegexp(path, keys);
    if (Array.isArray(path))
        return arrayToRegexp(path, keys, options);
    return stringToRegexp(path, keys, options);
}

/**
 * Cancel token
 * @private
 * @type { Symbol }
 */
const CANCEL = Symbol();

/**
 * Helper that can be returned by ruit function to cancel the tasks chain
 * @returns { Symbol } internal private constant
 * @example
 *
 * ruit(
 *   100,
 *   num => Math.random() * num
 *   num => num > 50 ? ruit.cancel() : num
 *   num => num - 2
 * ).then(result => {
 *   console.log(result) // here we will get only number lower than 50
 * })
 *
 */
ruit.cancel = () => CANCEL;

/**
 * The same as ruit() but with the arguments inverted from right to left
 * @param   { * } tasks - list of tasks to process sequentially
 * @returns { Promise } a promise containing the result of the whole chain
 * @example
 *
 * const curry = f => a => b => f(a, b)
 * const add = (a, b) => a + b
 *
 * const addOne = curry(add)(1)
 *
 * const squareAsync = (num) => {
 *   return new Promise(r => {
 *     setTimeout(r, 500, num * 2)
 *   })
 * }
 *
 * // a -> a + a -> a * 2
 * // basically from right to left: 1 => 1 + 1 => 2 * 2
 * ruit.compose(squareAsync, addOne, 1).then(result => console.log(result)) // 4
 */
ruit.compose = (...tasks) => ruit(...tasks.reverse());

/**
 * Serialize a list of sync and async tasks from left to right
 * @param   { * } tasks - list of tasks to process sequentially
 * @returns { Promise } a promise containing the result of the whole chain
 * @example
 *
 * const curry = f => a => b => f(a, b)
 * const add = (a, b) => a + b
 *
 * const addOne = curry(add)(1)
 *
 * const squareAsync = (num) => {
 *   return new Promise(r => {
 *     setTimeout(r, 500, num * 2)
 *   })
 * }
 *
 * // a -> a + a -> a * 2
 * // basically from left to right: 1 => 1 + 1 => 2 * 2
 * ruit(1, addOne, squareAsync).then(result => console.log(result)) // 4
 */
function ruit(...tasks) {
  return new Promise((resolve, reject) => {
    return (function run(queue, result) {
      if (!queue.length) return resolve(result)

      const [task, ...rest] = queue;
      const value = typeof task === 'function' ? task(result) : task;
      const done = v => run(rest, v);

      // check against nil values
      if (value != null) {
        if (value === CANCEL) return
        if (value.then) return value.then(done, reject)
      }

      return Promise.resolve(done(value))
    })(tasks)
  })
}

// Store the erre the API methods to handle the plugins installation
const API_METHODS = new Set();
const UNSUBSCRIBE_SYMBOL = Symbol();
const UNSUBSCRIBE_METHOD = 'off';
const CANCEL_METHOD = 'cancel';

/**
 * Factory function to create the stream generator
 * @private
 * @param {Set} modifiers - stream input modifiers
 * @returns {Generator} the stream generator
 */
function createStream(modifiers) {
  const stream = (function *stream() {
    while (true) {
      // get the initial stream value
      const input = yield;

      // run the input sequence
      yield ruit(input, ...modifiers);
    }
  })();

  // start the stream
  stream.next();

  return stream
}

/**
 * Dispatch a value to several listeners
 * @private
 * @param   {Set} callbacks - callbacks collection
 * @param   {*} value - anything
 * @returns {Set} the callbacks received
 */
function dispatch(callbacks, value) {
  callbacks.forEach(f => {
    // unsubscribe the callback if erre.unsubscribe() will be returned
    if (f(value) === UNSUBSCRIBE_SYMBOL) callbacks.delete(f);
  });

  return callbacks
}

/**
 * Throw a panic error
 * @param {string} message - error message
 * @returns {Error} an error object
 */
function panic$1(message) {
  throw new Error(message)
}

/**
 * Install an erre plugin adding it to the API
 * @param   {string} name - plugin name
 * @param   {Function} fn - new erre API method
 * @returns {Function} return the erre function
 */
erre.install = function(name, fn) {
  if (!name || typeof name !== 'string')
    panic$1('Please provide a name (as string) for your erre plugin');
  if (!fn || typeof fn !== 'function')
    panic$1('Please provide a function for your erre plugin');

  if (API_METHODS.has(name)) {
    panic$1(`The ${name} is already part of the erre API, please provide a different name`);
  } else {
    erre[name] = fn;
    API_METHODS.add(name);
  }

  return erre
};

// alias for ruit canel to stop a stream chain
erre.install(CANCEL_METHOD, ruit.cancel);

// unsubscribe helper
erre.install(UNSUBSCRIBE_METHOD, () => UNSUBSCRIBE_SYMBOL);

/**
 * Stream constuction function
 * @param   {...Function} fns - stream modifiers
 * @returns {Object} erre instance
 */
function erre(...fns) {
  const
    [success, error, end, modifiers] = [new Set(), new Set(), new Set(), new Set(fns)],
    generator = createStream(modifiers),
    stream = Object.create(generator),
    addToCollection = (collection) => (fn) => collection.add(fn) && stream,
    deleteFromCollection = (collection) => (fn) => collection.delete(fn) ? stream
      : panic$1('Couldn\'t remove handler passed by reference');

  return Object.assign(stream, {
    on: Object.freeze({
      value: addToCollection(success),
      error: addToCollection(error),
      end: addToCollection(end)
    }),
    off: Object.freeze({
      value: deleteFromCollection(success),
      error: deleteFromCollection(error),
      end: deleteFromCollection(end)
    }),
    connect: addToCollection(modifiers),
    push(input) {
      const { value, done } = stream.next(input);

      // dispatch the stream events
      if (!done) {
        value.then(
          res => dispatch(success, res),
          err => dispatch(error, err)
        );
      }

      return stream
    },
    end() {
      // kill the stream
      generator.return();
      // dispatch the end event
      dispatch(end)
      // clean up all the collections
      ;[success, error, end, modifiers].forEach(el => el.clear());

      return stream
    },
    fork() {
      return erre(...modifiers)
    },
    next(input) {
      // get the input and run eventually the promise
      const result = generator.next(input);

      // pause to the next iteration
      generator.next();

      return result
    }
  })
}

const isString = str => typeof str === 'string';
const parseURL = (...args) => new URL(...args);

/**
 * Replace the base path from a path
 * @param   {string} path - router path string
 * @returns {string} path cleaned up without the base
 */
const replaceBase = path => path.replace(defaults.base, '');

/**
 * Try to match the current path or skip it
 * @param   {RegExp} pathRegExp - target path transformed by pathToRegexp
 * @returns {string|Symbol} if the path match we return it otherwise we cancel the stream
 */
const matchOrSkip = pathRegExp => path => match(path, pathRegExp) ? path : erre.cancel();

/**
 * Combine 2 streams connecting the events of dispatcherStream to the receiverStream
 * @param   {Stream} dispatcherStream - main stream dispatching events
 * @param   {Stream} receiverStream - sub stream receiving events from the dispatcher
 * @returns {Stream} receiverStream
 */
const joinStreams = (dispatcherStream, receiverStream) => {
  dispatcherStream.on.value(receiverStream.push);

  receiverStream.on.end(() => {
    dispatcherStream.off.value(receiverStream.push);
  });

  return receiverStream
};

/**
 * Error handling function
 * @param   {Error} error - error to catch
 * @returns {void}
 */
/* c8 ignore start */
const panic$2 = error => {
  if (defaults.silentErrors) return

  throw new Error(error)
};
/* c8 ignore stop */

// make sure that the router will always receive strings params
const filterStrings = str => isString(str) ? str : erre.cancel();

// create the streaming router
const router = erre(filterStrings).on.error(panic$2); // cast the values of this stream always to string

/**
 * Merge the user options with the defaults
 * @param   {Object} options - custom user options
 * @returns {Object} options object merged with defaults
 */
const mergeOptions = options => ({...defaults, ...options});

/* @type {object} general configuration object */
const defaults = {
  base: 'https://localhost',
  silentErrors: false,
  // pathToRegexp options
  sensitive: false,
  strict: false,
  end: true,
  start: true,
  delimiter: '/#?',
  encode: undefined,
  endsWith: undefined,
  prefixes: './'
};

/**
 * Configure the router options overriding the defaults
 * @param {Object} options - custom user options to override
 * @returns {Object} new defaults
 */
const configure = (options) => {
  Object.entries(options).forEach(([key, value]) => {
    if (Object.hasOwn(defaults, key)) defaults[key] = value;
  });

  return defaults
};



/* {@link https://github.com/pillarjs/path-to-regexp#usage} */
const toRegexp = (path, keys, options) => pathToRegexp(path, keys, mergeOptions(options));

/**
 * Parse a string path generating an object containing
 * @param   {string} path - target path
 * @param   {RegExp} pathRegExp - path transformed to regexp via pathToRegexp
 * @param   {Object} options - object containing the base path
 * @returns {URL} url object enhanced with the `match` attribute
 */
const toURL = (path, pathRegExp, options = {}) => {
  const {base} = mergeOptions(options);
  const [, ...params] = pathRegExp.exec(path);
  const url = parseURL(path, base);

  // extend the url object adding the matched params
  url.params = params.reduce((acc, param, index) => {
    const key = options.keys && options.keys[index];
    if (key) acc[key.name] = param ? decodeURIComponent(param) : param;
    return acc
  }, {});

  return url
};

/**
 * Return true if a path will be matched
 * @param   {string} path - target path
 * @param   {RegExp} pathRegExp - path transformed to regexp via pathToRegexp
 * @returns {boolean} true if the path matches the regexp
 */
const match = (path, pathRegExp) => pathRegExp.test(path);

/**
 * Factory function to create an sequence of functions to pass to erre.js
 * This function will be used in the erre stream
 * @param   {RegExp} pathRegExp - path transformed to regexp via pathToRegexp
 * @param   {Object} options - pathToRegexp options object
 * @returns {Array} a functions array that will be used as stream pipe for erre.js
 */
const createURLStreamPipe = (pathRegExp, options) => [
  decodeURI,
  replaceBase,
  matchOrSkip(pathRegExp),
  path => toURL(path, pathRegExp, options)
];

/**
 * Create a fork of the main router stream
 * @param   {string} path - route to match
 * @param   {Object} options - pathToRegexp options object
 * @returns {Stream} new route stream
 */
function createRoute(path, options) {
  const keys = [];
  const pathRegExp = pathToRegexp(path, keys, options);
  const URLStream = erre(...createURLStreamPipe(pathRegExp, {
    ...options,
    keys
  }));

  return joinStreams(router, URLStream).on.error(panic$2)
}

const WINDOW_EVENTS = 'popstate';
const CLICK_EVENT = 'click';
const DOWNLOAD_LINK_ATTRIBUTE = 'download';
const HREF_LINK_ATTRIBUTE = 'href';
const TARGET_SELF_LINK_ATTRIBUTE = '_self';
const LINK_TAG_NAME = 'A';
const HASH = '#';
const SLASH = '/';
const PATH_ATTRIBUTE = 'path';
const RE_ORIGIN = /^.+?\/\/+[^/]+/;

/**
 * Converts any DOM node/s to a loopable array
 * @param   { HTMLElement|NodeList } els - single html element or a node list
 * @returns { Array } always a loopable object
 */
function domToArray(els) {
  // can this object be already looped?
  if (!Array.isArray(els)) {
    // is it a node list?
    if (
      /^\[object (HTMLCollection|NodeList|Object)\]$/
        .test(Object.prototype.toString.call(els))
        && typeof els.length === 'number'
    )
      return Array.from(els)
    else
      // if it's a single node
      // it will be returned as "array" with one single entry
      return [els]
  }
  // this object could be looped out of the box
  return els
}

/**
 * Simple helper to find DOM nodes returning them as array like loopable object
 * @param   { string|DOMNodeList } selector - either the query or the DOM nodes to arraify
 * @param   { HTMLElement }        scope      - context defining where the query will search for the DOM nodes
 * @returns { Array } DOM nodes found as array
 */
function $(selector, scope) {
  return domToArray(typeof selector === 'string' ?
    (scope || document).querySelectorAll(selector) :
    selector
  )
}

const getCurrentRoute = ((currentRoute) => {
  // listen the route changes events to store the current route
  router.on.value((r) => (currentRoute = r));

  return () => {
    return currentRoute
  }
})(null);

/**
 * Normalize the return values, in case of a single value we avoid to return an array
 * @param   { Array } values - list of values we want to return
 * @returns { Array|string|boolean } either the whole list of values or the single one found
 * @private
 */
const normalize = values => values.length === 1 ? values[0] : values;

/**
 * Parse all the nodes received to get/remove/check their attributes
 * @param   { HTMLElement|NodeList|Array } els    - DOM node/s to parse
 * @param   { string|Array }               name   - name or list of attributes
 * @param   { string }                     method - method that will be used to parse the attributes
 * @returns { Array|string } result of the parsing in a list or a single value
 * @private
 */
function parseNodes(els, name, method) {
  const names = typeof name === 'string' ? [name] : name;
  return normalize(domToArray(els).map(el => {
    return normalize(names.map(n => el[method](n)))
  }))
}

/**
 * Get any attribute from a single or a list of DOM nodes
 * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse
 * @param   { string|Array }               name  - name or list of attributes to get
 * @returns { Array|string } list of the attributes found
 *
 * @example
 *
 * import { get } from 'bianco.attr'
 *
 * const img = document.createElement('img')
 *
 * get(img, 'width') // => '200'
 *
 * // or also
 * get(img, ['width', 'height']) // => ['200', '300']
 *
 * // or also
 * get([img1, img2], ['width', 'height']) // => [['200', '300'], ['500', '200']]
 */
function get(els, name) {
  return parseNodes(els, name, 'getAttribute')
}

/**
 * Set any attribute on a single or a list of DOM nodes
 * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse
 * @param   { string|Array }               name  - name or list of attributes to detect
 * @returns { boolean|Array } true or false or an array of boolean values
 * @example
 *
 * import { has } from 'bianco.attr'
 *
 * has(img, 'width') // false
 *
 * // or also
 * has(img, ['width', 'height']) // => [false, false]
 *
 * // or also
 * has([img1, img2], ['width', 'height']) // => [[false, false], [false, false]]
 */
function has(els, name) {
  return parseNodes(els, name, 'hasAttribute')
}

/**
 * Convert a string from camel case to dash-case
 * @param   {string} string - probably a component tag name
 * @returns {string} component name normalized
 */

/**
 * Convert a string containing dashes to camel case
 * @param   {string} string - input string
 * @returns {string} my-string -> myString
 */
function dashToCamelCase(string) {
  return string.replace(/-(\w)/g, (_, c) => c.toUpperCase())
}

const getGlobal = () => getWindow() || global;
const getWindow = () => (typeof window === 'undefined' ? null : window);
const getDocument = () =>
  typeof document === 'undefined' ? null : document;
const getHistory = () =>
  typeof history === 'undefined' ? null : history;
const getLocation = () => {
  const win = getWindow();
  return win ? win.location : {}
};

const defer = (() => {
  const globalScope = getGlobal();

  return globalScope.requestAnimationFrame || globalScope.setTimeout
})();

const cancelDefer = (() => {
  const globalScope = getGlobal();

  return globalScope.cancelAnimationFrame || globalScope.clearTimeout
})();

const getAttribute = (attributes, name) =>
  attributes && attributes.find((a) => dashToCamelCase(a.name) === name);

const createDefaultSlot = (attributes = []) => {
  const { template, bindingTypes, expressionTypes } = __.DOMBindings;

  return template(null, [
    {
      type: bindingTypes.SLOT,
      name: 'default',
      attributes: attributes.map((attr) => ({
        ...attr,
        type: expressionTypes.ATTRIBUTE,
      })),
    },
  ])
};

// True if the selector string is valid
const isValidQuerySelectorString = (selector) =>
  /^([a-zA-Z0-9-_*#.:[\]\s>+~()='"]|\\.)+$/.test(selector);

/**
 * Similar to compose but performs from left-to-right function composition.<br/>
 * {@link https://30secondsofcode.org/function#composeright see also}
 * @param   {...[function]} fns) - list of unary function
 * @returns {*} result of the computation
 */

/**
 * Performs right-to-left function composition.<br/>
 * Use Array.prototype.reduce() to perform right-to-left function composition.<br/>
 * The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.<br/>
 * {@link https://30secondsofcode.org/function#compose original source code}
 * @param   {...[function]} fns) - list of unary function
 * @returns {*} result of the computation
 */
function compose(...fns) {
  return fns.reduce((f, g) => (...args) => f(g(...args)))
}

const getInitialRouteValue = (pathToRegexp, path, options) => {
  const route = compose(
    ...createURLStreamPipe(pathToRegexp, options).reverse(),
  )(path);

  return route.params ? route : null
};

const clearDOMBetweenNodes = (first, last, includeBoundaries) => {
  const clear = (node) => {
    if (!node || (node === last && !includeBoundaries)) return
    const { nextSibling } = node;
    node.remove();
    clear(nextSibling);
  };

  clear(includeBoundaries ? first : first.nextSibling);
};

const routeHoc$1 = ({ slots, attributes }) => {
  const placeholders = {
    before: document.createTextNode(''),
    after: document.createTextNode(''),
  };

  return {
    mount(el, context) {
      // create the component state
      const currentRoute = getCurrentRoute();
      const path =
        getAttribute(attributes, PATH_ATTRIBUTE)?.evaluate(context) ||
        get(el, PATH_ATTRIBUTE);
      const pathToRegexp = toRegexp(path, []);
      const state = {
        pathToRegexp,
        route:
          currentRoute && match(currentRoute, pathToRegexp)
            ? getInitialRouteValue(pathToRegexp, currentRoute, {})
            : null,
      };
      this.el = el;
      this.slot = createDefaultSlot([
        {
          isBoolean: false,
          name: 'route',
          evaluate: () => this.state.route,
        },
      ]);
      this.context = context;
      this.state = state;
      // set the route listeners
      this.boundOnBeforeRoute = this.onBeforeRoute.bind(this);
      this.boundOnRoute = this.onRoute.bind(this);
      router.on.value(this.boundOnBeforeRoute);
      this.stream = createRoute(path).on.value(this.boundOnRoute);
      // update the DOM
      el.replaceWith(placeholders.before);
      placeholders.before.parentNode.insertBefore(
        placeholders.after,
        placeholders.before.nextSibling,
      );
      if (state.route) this.mountSlot();
    },
    update(context) {
      this.context = context;
      if (this.state.route) this.slot.update({}, context);
    },
    mountSlot() {
      const { route } = this.state;
      // insert the route root element after the before placeholder
      placeholders.before.parentNode.insertBefore(
        this.el,
        placeholders.before.nextSibling,
      );
      this.callLifecycleProperty('onBeforeMount', route);
      this.slot.mount(
        this.el,
        {
          slots,
        },
        this.context,
      );
      this.callLifecycleProperty('onMounted', route);
    },
    clearDOM(includeBoundaries) {
      // remove all the DOM nodes between the placeholders
      clearDOMBetweenNodes(
        placeholders.before,
        placeholders.after,
        includeBoundaries,
      );
    },
    unmount() {
      router.off.value(this.boundOnBeforeRoute);
      this.slot.unmount({}, this.context, true);
      this.clearDOM(true);
      this.stream.end();
    },
    onBeforeRoute(path) {
      const { route } = this.state;
      // this component was not mounted or the current path matches
      // we don't need to unmount this component
      if (!route || match(path, this.state.pathToRegexp)) return

      this.callLifecycleProperty('onBeforeUnmount', route);
      this.slot.unmount({}, this.context, true);
      this.clearDOM(false);
      this.state.route = null;
      this.callLifecycleProperty('onUnmounted', route);
    },
    onRoute(route) {
      const prevRoute = this.state.route;
      this.state.route = route;

      // if this route component was already mounted we need to update it
      if (prevRoute) this.slot.update({}, this.context);
      // this route component was never mounted, so we need to create its DOM
      else this.mountSlot();

      // emulate the default browser anchor links behaviour
      if (route.hash && isValidQuerySelectorString(route.hash))
        $(route.hash)?.[0].scrollIntoView();
    },
    callLifecycleProperty(method, ...params) {
      const attr = getAttribute(attributes, method);

      if (attr) attr.evaluate(this.context)(...params);
    },
  }
};

var routeHoc = {
  css: null,

  exports: pure(
    routeHoc$1
  ),

  template: null,
  name: 'route-hoc'
};

const normalizeInitialSlash = (str) =>
  str[0] === SLASH ? str : `${SLASH}${str}`;
const removeTrailingSlash = (str) =>
  str[str.length - 1] === SLASH ? str.substr(0, str.length - 1) : str;

const normalizeBase = (base) => {
  const win = getWindow();
  const loc = win.location;
  const root = loc ? `${loc.protocol}//${loc.host}` : '';
  const { pathname } = loc ? loc : {};

  switch (true) {
    // pure root url + pathname
    case Boolean(base) === false:
      return removeTrailingSlash(`${root}${pathname || ''}`)
    // full path base
    case /(www|http(s)?:)/.test(base):
      return base
    // hash navigation
    case base[0] === HASH:
      return `${root}${pathname && pathname !== SLASH ? pathname : ''}${base}`
    // root url with trailing slash
    case base === SLASH:
      return removeTrailingSlash(root)
    // custom pathname
    default:
      return removeTrailingSlash(`${root}${normalizeInitialSlash(base)}`)
  }
};

function setBase(base) {
  configure({ base: normalizeBase(base) });
}

/**
 * Throw an error with a descriptive message
 * @param   { string } message - error message
 * @param   { string } cause - optional error cause object
 * @returns { undefined } hoppla... at this point the program should stop working
 */
function panic(message, cause) {
  throw new Error(message, { cause })
}

/**
 * Split a string into several items separed by spaces
 * @param   { string } l - events list
 * @returns { Array } all the events detected
 * @private
 */
const split = l => l.split(/\s/);

/**
 * Set a listener for all the events received separated by spaces
 * @param   { HTMLElement|NodeList|Array } els     - DOM node/s where the listeners will be bound
 * @param   { string }                     evList  - list of events we want to bind or unbind space separated
 * @param   { Function }                   cb      - listeners callback
 * @param   { string }                     method  - either 'addEventListener' or 'removeEventListener'
 * @param   { Object }                     options - event options (capture, once and passive)
 * @returns { undefined }
 * @private
 */
function manageEvents(els, evList, cb, method, options) {
  els = domToArray(els);

  split(evList).forEach((e) => {
    els.forEach(el => el[method](e, cb, options || false));
  });
}

/**
 * Set a listener for all the events received separated by spaces
 * @param   { HTMLElement|Array } els    - DOM node/s where the listeners will be bound
 * @param   { string }            evList - list of events we want to bind space separated
 * @param   { Function }          cb     - listeners callback
 * @param   { Object }            options - event options (capture, once and passive)
 * @returns { HTMLElement|NodeList|Array } DOM node/s and first argument of the function
 */
function add(els, evList, cb, options) {
  manageEvents(els, evList, cb, 'addEventListener', options);
  return els
}

/**
 * Remove all the listeners for the events received separated by spaces
 * @param   { HTMLElement|Array } els     - DOM node/s where the events will be unbind
 * @param   { string }            evList  - list of events we want unbind space separated
 * @param   { Function }          cb      - listeners callback
 * @param   { Object }             options - event options (capture, once and passive)
 * @returns { HTMLElement|NodeList|Array }  DOM node/s and first argument of the function
 */
function remove(els, evList, cb, options) {
  manageEvents(els, evList, cb, 'removeEventListener', options);
  return els
}

const onWindowEvent = () =>
  router.push(normalizePath(String(getLocation().href)));
const onRouterPush = (path) => {
  const url = path.includes(defaults.base) ? path : defaults.base + path;
  const loc = getLocation();
  const hist = getHistory();
  const doc = getDocument();

  // update the browser history only if it's necessary
  if (hist && url !== loc.href) {
    hist.pushState(null, doc.title, url);
  }
};
const getLinkElement = (node) =>
  node && !isLinkNode(node) ? getLinkElement(node.parentNode) : node;
const isLinkNode = (node) => node.nodeName === LINK_TAG_NAME;
const isCrossOriginLink = (path) =>
  path.indexOf(getLocation().href.match(RE_ORIGIN)[0]) === -1;
const isTargetSelfLink = (el) =>
  el.target && el.target !== TARGET_SELF_LINK_ATTRIBUTE;
const isEventForbidden = (event) =>
  (event.which && event.which !== 1) || // not left click
  event.metaKey ||
  event.ctrlKey ||
  event.shiftKey || // or meta keys
  event.defaultPrevented; // or default prevented
const isForbiddenLink = (el) =>
  !el ||
  !isLinkNode(el) || // not A tag
  has(el, DOWNLOAD_LINK_ATTRIBUTE) || // has download attr
  !has(el, HREF_LINK_ATTRIBUTE) || // has no href attr
  isTargetSelfLink(el) ||
  isCrossOriginLink(el.href);
const normalizePath = (path) => path.replace(defaults.base, '');
const isInBase = (path) => !defaults.base || path.includes(defaults.base);

/**
 * Callback called anytime something will be clicked on the page
 * @param   {HTMLEvent} event - click event
 * @returns {undefined} void method
 */
const onClick = (event) => {
  if (isEventForbidden(event)) return

  const el = getLinkElement(event.target);

  if (isForbiddenLink(el) || !isInBase(el.href)) return

  event.preventDefault();

  router.push(normalizePath(el.href));
};

/**
 * Link the rawth router to the DOM events
 * @param { HTMLElement } container - DOM node where the links are located
 * @returns {Function} teardown function
 */
function initDomListeners(container) {
  const win = getWindow();
  const root = container || getDocument();

  if (win) {
    add(win, WINDOW_EVENTS, onWindowEvent);
    add(root, CLICK_EVENT, onClick);
  }

  router.on.value(onRouterPush);

  return () => {
    if (win) {
      remove(win, WINDOW_EVENTS, onWindowEvent);
      remove(root, CLICK_EVENT, onClick);
    }

    router.off.value(onRouterPush);
  }
}

const BASE_ATTRIBUTE_NAME = 'base';
const INITIAL_ROUTE = 'initialRoute';
const ON_STARTED_ATTRIBUTE_NAME = 'onStarted';

const routerHoc$1 = ({ slots, attributes, props }) => {
  if (routerHoc$1.wasInitialized)
    panic('Multiple <router> components are not supported');

  return {
    slot: null,
    el: null,
    teardown: null,
    mount(el, context) {
      const initialRouteAttr = getAttribute(attributes, INITIAL_ROUTE);
      const initialRoute = initialRouteAttr
        ? initialRouteAttr.evaluate(context)
        : null;
      const currentRoute = getCurrentRoute();
      const onFirstRoute = () => {
        this.createSlot(context);
        router.off.value(onFirstRoute);
      };
      routerHoc$1.wasInitialized = true;

      this.el = el;
      this.teardown = initDomListeners(this.root);

      this.setBase(context);

      // mount the slots only if the current route was defined
      if (currentRoute && !initialRoute) {
        this.createSlot(context);
      } else {
        router.on.value(onFirstRoute);
        router.push(initialRoute || window.location.href);
      }
    },
    createSlot(context) {
      if (!slots || !slots.length) return
      const onStartedAttr = getAttribute(attributes, ON_STARTED_ATTRIBUTE_NAME);

      this.slot = createDefaultSlot();

      this.slot.mount(
        this.el,
        {
          slots,
        },
        context,
      );

      if (onStartedAttr) {
        onStartedAttr.evaluate(context)(getCurrentRoute());
      }
    },
    update(context) {
      this.setBase(context);

      // defer the updates to avoid internal recursive update calls
      // see https://github.com/riot/route/issues/148
      if (this.slot) {
        cancelDefer(this.deferred);

        this.deferred = defer(() => {
          this.slot.update({}, context);
        });
      }
    },
    unmount(...args) {
      this.teardown();
      routerHoc$1.wasInitialized = false;

      if (this.slot) {
        this.slot.unmount(...args);
      }
    },
    getBase(context) {
      const baseAttr = getAttribute(attributes, BASE_ATTRIBUTE_NAME);

      return baseAttr
        ? baseAttr.evaluate(context)
        : this.el.getAttribute(BASE_ATTRIBUTE_NAME) || '/'
    },
    setBase(context) {
      setBase(props ? props.base : this.getBase(context));
    },
  }
};

// flag to avoid multiple router instances
routerHoc$1.wasInitialized = false;

var routerHoc = {
  css: null,

  exports: pure(
    routerHoc$1
  ),

  template: null,
  name: 'router-hoc'
};

var App = {
  css: `app,[is="app"]{ --primary-color: rgba(96, 165, 254, 1); --background-color: aliceblue; --light-gray: #f4f4f4; font-family: ui-sans-serif, system-ui, sans-serif; box-sizing: border-box; display: flex; flex-direction: column; justify-content: center; margin: 0 auto; padding: 2rem 1rem 1rem; min-height: 100vh; text-align: center; background-color: var(--background-color); }app h1,[is="app"] h1{ font-weight: 300; font-size: 1.6rem; margin-bottom: 1.2rem; }app h1 b,[is="app"] h1 b{ font-weight: bold; }app header,[is="app"] header{ display: flex; justify-content: center; align-items: center; padding: 0.2rem 1rem 0.5rem; margin: 1rem 0; gap: 2rem; }app main,[is="app"] main{ margin: 0 auto; max-width: 600px; min-height: 200px; }app main p,[is="app"] main p{ line-height: 1.6; margin-bottom: 1rem; }app nav,[is="app"] nav{ display: flex; align-items: center; justify-content: center; padding: 0rem 1rem 1.4rem; }app a,[is="app"] a{ color: var(--primary-color); text-decoration: none; }app a:focus,[is="app"] a:focus,app a:active,[is="app"] a:active,app a:hover,[is="app"] a:hover{ opacity: 0.7; }app nav a,[is="app"] nav a{ padding: 0 0.4rem; }app nav a.active,[is="app"] nav a.active{ text-decoration: underline; pointer-events: none; }`,

  exports: withTypes(
    {
      components: {
        Router: routerHoc,
        Route: routeHoc,
        Home,
        About,
        NotFound
      },
      state: {
        currentPath: null,
        showNotFound: false
      },
      // the isServer property is automatically injected by @riotjs/ssr
      onBeforeMount({ initialRoute }) {
        // create a stream on all routes
        this.anyRouteStream = createRoute('(.*)');
        // create a stream to check the riot-router state
        this.routerStateStream = erre$1();
        // update the state of the not found component depending on the initial route
        this.state.showNotFound = this.isNotFoundVisible(initialRoute);
        // check any route change to understand if the not found site should be displayed
        // and to update the menu link classes
        this.anyRouteStream.on.value(this.onAnyRoute);
        // set the initial current path
        this.state.currentPath = initialRoute;
      },
      onRouterStarted() {
        // broadcast the router started event
        this.routerStateStream.push('started');
      },
      // Needed only for SSR
      onAsyncRendering(resolve) {
        const onReady = () => {
          this.routerStateStream.off.value(onReady);
          resolve();
        };

        // wait the router started event
        this.routerStateStream.on.value(onReady);
      },
      getPages() {
        return Object.values(this.props.routes)
      },
      isNotFoundVisible(path) {
        return !this.getPages().some(p => match(path, toRegexp(p.path)))
      },
      onAnyRoute({ pathname }) {
        // show the not found page if none of the page paths are matched
        this.update({
          currentPath: pathname,
          showNotFound: this.isNotFoundVisible(pathname)
        });
      },
      getLinkClass(path) {

        return this.state?.currentPath === path ? 'active' : null
      },
      onBeforeUnmount() {
        this.routerStateStream.end();
        this.anyRouteStream.end();
      }
    }
  ),

  template: (
    template,
    expressionTypes,
    bindingTypes,
    getComponent
  ) => template(
    '<router expr0="expr0"></router>',
    [
      {
        type: bindingTypes.TAG,
        getComponent: getComponent,
        evaluate: _scope => 'router',

        slots: [
          {
            id: 'default',
            html: '<header><img width="60" height="60" src="./src/images/phone.png" alt="Phone Logo"/>\n      +\n      <img width="75" height="76" src="./src/images/whatsapp.png" alt="Whatsapp Logo"/></header><nav><a expr1="expr1"></a></nav><not-found expr2="expr2"></not-found><main><route expr3="expr3"></route></main>',

            bindings: [
              {
                type: bindingTypes.EACH,
                getKey: null,
                condition: null,

                template: template(
                  ' ',
                  [
                    {
                      expressions: [
                        {
                          type: expressionTypes.TEXT,
                          childNodeIndex: 0,

                          evaluate: _scope => [
                            _scope.page.label
                          ].join(
                            ''
                          )
                        },
                        {
                          type: expressionTypes.ATTRIBUTE,
                          isBoolean: false,
                          name: 'class',

                          evaluate: _scope => _scope.getLinkClass(
                            _scope.page.path
                          )
                        },
                        {
                          type: expressionTypes.ATTRIBUTE,
                          isBoolean: false,
                          name: 'href',
                          evaluate: _scope => _scope.page.path
                        }
                      ]
                    }
                  ]
                ),

                redundantAttribute: 'expr1',
                selector: '[expr1]',
                itemName: 'page',
                indexName: null,
                evaluate: _scope => _scope.getPages()
              },
              {
                type: bindingTypes.IF,
                evaluate: _scope => _scope.state.showNotFound,
                redundantAttribute: 'expr2',
                selector: '[expr2]',

                template: template(
                  null,
                  [
                    {
                      type: bindingTypes.TAG,
                      getComponent: getComponent,
                      evaluate: _scope => 'not-found',
                      slots: [],
                      attributes: []
                    }
                  ]
                )
              },
              {
                type: bindingTypes.EACH,
                getKey: null,
                condition: null,

                template: template(
                  null,
                  [
                    {
                      type: bindingTypes.TAG,
                      getComponent: getComponent,
                      evaluate: _scope => 'route',

                      slots: [
                        {
                          id: 'default',
                          html: '<main expr4="expr4"></main>',

                          bindings: [
                            {
                              type: bindingTypes.TAG,
                              getComponent: getComponent,
                              evaluate: _scope => _scope.page.component,
                              slots: [],
                              attributes: [],
                              redundantAttribute: 'expr4',
                              selector: '[expr4]'
                            }
                          ]
                        }
                      ],

                      attributes: [
                        {
                          type: expressionTypes.ATTRIBUTE,
                          isBoolean: false,
                          name: 'path',
                          evaluate: _scope => _scope.page.path
                        }
                      ]
                    }
                  ]
                ),

                redundantAttribute: 'expr3',
                selector: '[expr3]',
                itemName: 'page',
                indexName: null,
                evaluate: _scope => _scope.getPages()
              }
            ]
          }
        ],

        attributes: [
          {
            type: expressionTypes.EVENT,
            name: 'on-started',
            evaluate: _scope => _scope.onRouterStarted
          },
          {
            type: expressionTypes.ATTRIBUTE,
            isBoolean: false,
            name: 'base',
            evaluate: _scope => _scope.props.base
          },
          {
            type: expressionTypes.ATTRIBUTE,
            isBoolean: false,
            name: 'initial-route',
            evaluate: _scope => _scope.props.initialRoute
          }
        ],

        redundantAttribute: 'expr0',
        selector: '[expr0]'
      }
    ]
  ),

  name: 'app'
};

const appNode = document.querySelector('app');
appNode && hydrate(App)(appNode, window.__INITIAL_STATE__);
